// Implementation file for parser generated by fsyacc
module RubbishPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "RubbishPar.fsy"

  (* File Rubbish/RubbishPar.fsy
     Parser specification for the simple expression language.
   *)
open Absyn

# 13 "RubbishPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | DEF
  | RETURN
  | NOT
  | SEQOR
  | SEQAND
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | ASSIGN
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | WHILE
  | FOR
  | IN
  | IF
  | ELSE
  | ELIF
  | SWITCH
  | CASE
  | DEFAULT
  | BREAK
  | CONTINUE
  | TRY
  | CATCH
  | FINALLY
  | COMMA
  | SEMI
  | COLON
  | PRINT
  | PRINTLN
  | RANGE
  | NULL
  | IMPORT
  | LAMBDA
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTINT of (int)
  | CSTBOOL of (int)
  | CSTFLOAT of (float)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_DEF
    | TOKEN_RETURN
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_ASSIGN
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_IN
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_ELIF
    | TOKEN_SWITCH
    | TOKEN_CASE
    | TOKEN_DEFAULT
    | TOKEN_BREAK
    | TOKEN_CONTINUE
    | TOKEN_TRY
    | TOKEN_CATCH
    | TOKEN_FINALLY
    | TOKEN_COMMA
    | TOKEN_SEMI
    | TOKEN_COLON
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RANGE
    | TOKEN_NULL
    | TOKEN_IMPORT
    | TOKEN_LAMBDA
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_CSTFLOAT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StatExec
    | NONTERM_Stmt
    | NONTERM_IfConJud
    | NONTERM_SwConJud
    | NONTERM_Expr
    | NONTERM_Access
    | NONTERM_ExprNotAccess
    | NONTERM_List
    | NONTERM_AtExprNotAccess
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | DEF  -> 1 
  | RETURN  -> 2 
  | NOT  -> 3 
  | SEQOR  -> 4 
  | SEQAND  -> 5 
  | EQ  -> 6 
  | NE  -> 7 
  | GT  -> 8 
  | LT  -> 9 
  | GE  -> 10 
  | LE  -> 11 
  | ASSIGN  -> 12 
  | PLUS  -> 13 
  | MINUS  -> 14 
  | TIMES  -> 15 
  | DIV  -> 16 
  | MOD  -> 17 
  | LPAR  -> 18 
  | RPAR  -> 19 
  | LBRACE  -> 20 
  | RBRACE  -> 21 
  | LBRACK  -> 22 
  | RBRACK  -> 23 
  | WHILE  -> 24 
  | FOR  -> 25 
  | IN  -> 26 
  | IF  -> 27 
  | ELSE  -> 28 
  | ELIF  -> 29 
  | SWITCH  -> 30 
  | CASE  -> 31 
  | DEFAULT  -> 32 
  | BREAK  -> 33 
  | CONTINUE  -> 34 
  | TRY  -> 35 
  | CATCH  -> 36 
  | FINALLY  -> 37 
  | COMMA  -> 38 
  | SEMI  -> 39 
  | COLON  -> 40 
  | PRINT  -> 41 
  | PRINTLN  -> 42 
  | RANGE  -> 43 
  | NULL  -> 44 
  | IMPORT  -> 45 
  | LAMBDA  -> 46 
  | CSTSTRING _ -> 47 
  | NAME _ -> 48 
  | CSTINT _ -> 49 
  | CSTBOOL _ -> 50 
  | CSTFLOAT _ -> 51 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_DEF 
  | 2 -> TOKEN_RETURN 
  | 3 -> TOKEN_NOT 
  | 4 -> TOKEN_SEQOR 
  | 5 -> TOKEN_SEQAND 
  | 6 -> TOKEN_EQ 
  | 7 -> TOKEN_NE 
  | 8 -> TOKEN_GT 
  | 9 -> TOKEN_LT 
  | 10 -> TOKEN_GE 
  | 11 -> TOKEN_LE 
  | 12 -> TOKEN_ASSIGN 
  | 13 -> TOKEN_PLUS 
  | 14 -> TOKEN_MINUS 
  | 15 -> TOKEN_TIMES 
  | 16 -> TOKEN_DIV 
  | 17 -> TOKEN_MOD 
  | 18 -> TOKEN_LPAR 
  | 19 -> TOKEN_RPAR 
  | 20 -> TOKEN_LBRACE 
  | 21 -> TOKEN_RBRACE 
  | 22 -> TOKEN_LBRACK 
  | 23 -> TOKEN_RBRACK 
  | 24 -> TOKEN_WHILE 
  | 25 -> TOKEN_FOR 
  | 26 -> TOKEN_IN 
  | 27 -> TOKEN_IF 
  | 28 -> TOKEN_ELSE 
  | 29 -> TOKEN_ELIF 
  | 30 -> TOKEN_SWITCH 
  | 31 -> TOKEN_CASE 
  | 32 -> TOKEN_DEFAULT 
  | 33 -> TOKEN_BREAK 
  | 34 -> TOKEN_CONTINUE 
  | 35 -> TOKEN_TRY 
  | 36 -> TOKEN_CATCH 
  | 37 -> TOKEN_FINALLY 
  | 38 -> TOKEN_COMMA 
  | 39 -> TOKEN_SEMI 
  | 40 -> TOKEN_COLON 
  | 41 -> TOKEN_PRINT 
  | 42 -> TOKEN_PRINTLN 
  | 43 -> TOKEN_RANGE 
  | 44 -> TOKEN_NULL 
  | 45 -> TOKEN_IMPORT 
  | 46 -> TOKEN_LAMBDA 
  | 47 -> TOKEN_CSTSTRING 
  | 48 -> TOKEN_NAME 
  | 49 -> TOKEN_CSTINT 
  | 50 -> TOKEN_CSTBOOL 
  | 51 -> TOKEN_CSTFLOAT 
  | 54 -> TOKEN_end_of_input
  | 52 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Fundec 
    | 6 -> NONTERM_Paramdecs 
    | 7 -> NONTERM_Paramdecs 
    | 8 -> NONTERM_Paramdecs1 
    | 9 -> NONTERM_Paramdecs1 
    | 10 -> NONTERM_Block 
    | 11 -> NONTERM_StatExec 
    | 12 -> NONTERM_StatExec 
    | 13 -> NONTERM_StatExec 
    | 14 -> NONTERM_Stmt 
    | 15 -> NONTERM_Stmt 
    | 16 -> NONTERM_Stmt 
    | 17 -> NONTERM_Stmt 
    | 18 -> NONTERM_Stmt 
    | 19 -> NONTERM_Stmt 
    | 20 -> NONTERM_Stmt 
    | 21 -> NONTERM_Stmt 
    | 22 -> NONTERM_Stmt 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_Stmt 
    | 25 -> NONTERM_Stmt 
    | 26 -> NONTERM_Stmt 
    | 27 -> NONTERM_Stmt 
    | 28 -> NONTERM_IfConJud 
    | 29 -> NONTERM_IfConJud 
    | 30 -> NONTERM_IfConJud 
    | 31 -> NONTERM_SwConJud 
    | 32 -> NONTERM_SwConJud 
    | 33 -> NONTERM_SwConJud 
    | 34 -> NONTERM_Expr 
    | 35 -> NONTERM_Expr 
    | 36 -> NONTERM_Access 
    | 37 -> NONTERM_Access 
    | 38 -> NONTERM_ExprNotAccess 
    | 39 -> NONTERM_ExprNotAccess 
    | 40 -> NONTERM_ExprNotAccess 
    | 41 -> NONTERM_ExprNotAccess 
    | 42 -> NONTERM_ExprNotAccess 
    | 43 -> NONTERM_ExprNotAccess 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_ExprNotAccess 
    | 56 -> NONTERM_ExprNotAccess 
    | 57 -> NONTERM_ExprNotAccess 
    | 58 -> NONTERM_ExprNotAccess 
    | 59 -> NONTERM_List 
    | 60 -> NONTERM_List 
    | 61 -> NONTERM_List 
    | 62 -> NONTERM_AtExprNotAccess 
    | 63 -> NONTERM_AtExprNotAccess 
    | 64 -> NONTERM_Exprs 
    | 65 -> NONTERM_Exprs 
    | 66 -> NONTERM_Exprs1 
    | 67 -> NONTERM_Exprs1 
    | 68 -> NONTERM_Const 
    | 69 -> NONTERM_Const 
    | 70 -> NONTERM_Const 
    | 71 -> NONTERM_Const 
    | 72 -> NONTERM_Const 
    | 73 -> NONTERM_Const 
    | 74 -> NONTERM_Const 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 54 
let _fsyacc_tagOfErrorTerminal = 52

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | DEF  -> "DEF" 
  | RETURN  -> "RETURN" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | ASSIGN  -> "ASSIGN" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | WHILE  -> "WHILE" 
  | FOR  -> "FOR" 
  | IN  -> "IN" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | ELIF  -> "ELIF" 
  | SWITCH  -> "SWITCH" 
  | CASE  -> "CASE" 
  | DEFAULT  -> "DEFAULT" 
  | BREAK  -> "BREAK" 
  | CONTINUE  -> "CONTINUE" 
  | TRY  -> "TRY" 
  | CATCH  -> "CATCH" 
  | FINALLY  -> "FINALLY" 
  | COMMA  -> "COMMA" 
  | SEMI  -> "SEMI" 
  | COLON  -> "COLON" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | RANGE  -> "RANGE" 
  | NULL  -> "NULL" 
  | IMPORT  -> "IMPORT" 
  | LAMBDA  -> "LAMBDA" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 
  | CSTFLOAT _ -> "CSTFLOAT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | DEF  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | ELIF  -> (null : System.Object) 
  | SWITCH  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | DEFAULT  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | CONTINUE  -> (null : System.Object) 
  | TRY  -> (null : System.Object) 
  | CATCH  -> (null : System.Object) 
  | FINALLY  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | RANGE  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | IMPORT  -> (null : System.Object) 
  | LAMBDA  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTFLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 4us; 4us; 4us; 5us; 65535us; 0us; 22us; 4us; 22us; 17us; 22us; 20us; 22us; 22us; 22us; 1us; 65535us; 9us; 10us; 2us; 65535us; 9us; 13us; 15us; 16us; 16us; 65535us; 0us; 35us; 4us; 35us; 11us; 12us; 17us; 35us; 20us; 35us; 22us; 35us; 39us; 35us; 52us; 35us; 62us; 35us; 64us; 65us; 66us; 67us; 68us; 69us; 73us; 35us; 78us; 35us; 82us; 35us; 88us; 35us; 5us; 65535us; 0us; 6us; 4us; 6us; 17us; 18us; 20us; 21us; 22us; 23us; 12us; 65535us; 0us; 20us; 4us; 20us; 17us; 20us; 20us; 20us; 22us; 20us; 39us; 40us; 52us; 53us; 62us; 63us; 73us; 74us; 78us; 79us; 82us; 83us; 88us; 89us; 2us; 65535us; 40us; 41us; 79us; 80us; 2us; 65535us; 46us; 47us; 89us; 90us; 41us; 65535us; 0us; 25us; 4us; 25us; 17us; 25us; 20us; 25us; 22us; 25us; 27us; 29us; 37us; 38us; 39us; 25us; 43us; 44us; 50us; 51us; 52us; 25us; 59us; 60us; 62us; 25us; 73us; 25us; 76us; 77us; 78us; 25us; 82us; 25us; 85us; 86us; 88us; 25us; 95us; 96us; 99us; 100us; 101us; 128us; 104us; 128us; 107us; 129us; 110us; 111us; 112us; 113us; 130us; 115us; 131us; 116us; 132us; 117us; 133us; 118us; 134us; 119us; 135us; 120us; 136us; 121us; 137us; 122us; 138us; 123us; 139us; 124us; 140us; 125us; 141us; 126us; 142us; 127us; 143us; 128us; 148us; 129us; 41us; 65535us; 0us; 91us; 4us; 91us; 17us; 91us; 20us; 91us; 22us; 91us; 27us; 91us; 37us; 91us; 39us; 91us; 43us; 91us; 50us; 91us; 52us; 91us; 59us; 91us; 62us; 91us; 73us; 91us; 76us; 91us; 78us; 91us; 82us; 91us; 85us; 91us; 88us; 91us; 95us; 91us; 99us; 91us; 101us; 91us; 104us; 91us; 107us; 91us; 110us; 91us; 112us; 91us; 130us; 91us; 131us; 91us; 132us; 91us; 133us; 91us; 134us; 91us; 135us; 91us; 136us; 91us; 137us; 91us; 138us; 91us; 139us; 91us; 140us; 91us; 141us; 91us; 142us; 91us; 143us; 91us; 148us; 91us; 41us; 65535us; 0us; 92us; 4us; 92us; 17us; 92us; 20us; 92us; 22us; 92us; 27us; 92us; 37us; 92us; 39us; 92us; 43us; 92us; 50us; 92us; 52us; 92us; 59us; 92us; 62us; 92us; 73us; 92us; 76us; 92us; 78us; 92us; 82us; 92us; 85us; 92us; 88us; 92us; 95us; 92us; 99us; 92us; 101us; 92us; 104us; 93us; 107us; 92us; 110us; 92us; 112us; 92us; 130us; 92us; 131us; 92us; 132us; 92us; 133us; 92us; 134us; 92us; 135us; 92us; 136us; 92us; 137us; 92us; 138us; 92us; 139us; 92us; 140us; 92us; 141us; 92us; 142us; 92us; 143us; 92us; 148us; 92us; 3us; 65535us; 101us; 102us; 104us; 105us; 143us; 144us; 41us; 65535us; 0us; 98us; 4us; 98us; 17us; 98us; 20us; 98us; 22us; 98us; 27us; 98us; 37us; 98us; 39us; 98us; 43us; 98us; 50us; 98us; 52us; 98us; 59us; 98us; 62us; 98us; 73us; 98us; 76us; 98us; 78us; 98us; 82us; 98us; 85us; 98us; 88us; 98us; 95us; 98us; 99us; 98us; 101us; 98us; 104us; 98us; 107us; 98us; 110us; 98us; 112us; 98us; 130us; 98us; 131us; 98us; 132us; 98us; 133us; 98us; 134us; 98us; 135us; 98us; 136us; 98us; 137us; 98us; 138us; 98us; 139us; 98us; 140us; 98us; 141us; 98us; 142us; 98us; 143us; 98us; 148us; 98us; 1us; 65535us; 107us; 108us; 2us; 65535us; 107us; 147us; 148us; 149us; 41us; 65535us; 0us; 145us; 4us; 145us; 17us; 145us; 20us; 145us; 22us; 145us; 27us; 145us; 37us; 145us; 39us; 145us; 43us; 145us; 50us; 145us; 52us; 145us; 59us; 145us; 62us; 145us; 73us; 145us; 76us; 145us; 78us; 145us; 82us; 145us; 85us; 145us; 88us; 145us; 95us; 145us; 99us; 145us; 101us; 145us; 104us; 145us; 107us; 145us; 110us; 145us; 112us; 145us; 130us; 145us; 131us; 145us; 132us; 145us; 133us; 145us; 134us; 145us; 135us; 145us; 136us; 145us; 137us; 145us; 138us; 145us; 139us; 145us; 140us; 145us; 141us; 145us; 142us; 145us; 143us; 145us; 148us; 145us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 15us; 17us; 20us; 37us; 43us; 56us; 59us; 62us; 104us; 146us; 188us; 192us; 234us; 236us; 239us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 7us; 2us; 8us; 9us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 14us; 15us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 15us; 2us; 16us; 17us; 1us; 16us; 14us; 17us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 21us; 14us; 21us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 22us; 14us; 22us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 23us; 14us; 23us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 14us; 24us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 24us; 1us; 24us; 1us; 24us; 2us; 25us; 26us; 2us; 25us; 26us; 2us; 25us; 26us; 2us; 25us; 26us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 30us; 14us; 30us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 14us; 33us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 33us; 3us; 34us; 37us; 39us; 1us; 35us; 2us; 35us; 63us; 2us; 36us; 42us; 1us; 37us; 14us; 37us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 37us; 1us; 38us; 1us; 39us; 14us; 39us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 40us; 1us; 40us; 1us; 40us; 2us; 41us; 63us; 1us; 41us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 42us; 1us; 43us; 14us; 43us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 44us; 14us; 44us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 1us; 45us; 14us; 46us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 54us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 55us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 56us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 57us; 58us; 14us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 58us; 15us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 60us; 61us; 15us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 66us; 67us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 61us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 65us; 1us; 67us; 1us; 67us; 1us; 68us; 1us; 69us; 2us; 70us; 72us; 1us; 70us; 1us; 71us; 1us; 72us; 1us; 73us; 1us; 74us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 66us; 68us; 71us; 73us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 104us; 119us; 121us; 123us; 125us; 127us; 129us; 144us; 146us; 148us; 150us; 152us; 154us; 156us; 171us; 173us; 175us; 177us; 179us; 181us; 183us; 185us; 187us; 202us; 204us; 206us; 208us; 211us; 214us; 217us; 220us; 222us; 224us; 226us; 228us; 230us; 232us; 234us; 236us; 238us; 253us; 255us; 257us; 259us; 261us; 263us; 265us; 267us; 269us; 284us; 286us; 288us; 290us; 292us; 296us; 298us; 301us; 304us; 306us; 321us; 323us; 325us; 327us; 342us; 344us; 346us; 348us; 351us; 353us; 355us; 357us; 359us; 361us; 363us; 378us; 380us; 395us; 397us; 412us; 427us; 442us; 457us; 472us; 487us; 502us; 517us; 532us; 547us; 562us; 577us; 592us; 608us; 624us; 626us; 628us; 630us; 632us; 634us; 636us; 638us; 640us; 642us; 644us; 646us; 648us; 650us; 652us; 654us; 656us; 658us; 660us; 662us; 664us; 666us; 668us; 671us; 673us; 675us; 677us; 679us; |]
let _fsyacc_action_rows = 158
let _fsyacc_actionTableElements = [|24us; 16386us; 1us; 7us; 2us; 27us; 3us; 110us; 14us; 152us; 18us; 104us; 20us; 17us; 22us; 101us; 24us; 49us; 25us; 54us; 27us; 36us; 30us; 42us; 33us; 31us; 34us; 33us; 35us; 64us; 39us; 24us; 41us; 112us; 42us; 114us; 44us; 157us; 45us; 70us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 24us; 16386us; 1us; 7us; 2us; 27us; 3us; 110us; 14us; 152us; 18us; 104us; 20us; 17us; 22us; 101us; 24us; 49us; 25us; 54us; 27us; 36us; 30us; 42us; 33us; 31us; 34us; 33us; 35us; 64us; 39us; 24us; 41us; 112us; 42us; 114us; 44us; 157us; 45us; 70us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 0us; 16387us; 0us; 16388us; 1us; 32768us; 48us; 8us; 1us; 32768us; 18us; 9us; 1us; 16390us; 48us; 14us; 1us; 32768us; 19us; 11us; 1us; 32768us; 20us; 17us; 0us; 16389us; 0us; 16391us; 1us; 16392us; 38us; 15us; 1us; 32768us; 48us; 14us; 0us; 16393us; 24us; 16395us; 1us; 7us; 2us; 27us; 3us; 110us; 14us; 152us; 18us; 104us; 20us; 17us; 22us; 101us; 24us; 49us; 25us; 54us; 27us; 36us; 30us; 42us; 33us; 31us; 34us; 33us; 35us; 64us; 39us; 24us; 41us; 112us; 42us; 114us; 44us; 157us; 45us; 70us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 1us; 32768us; 21us; 19us; 0us; 16394us; 24us; 16395us; 1us; 7us; 2us; 27us; 3us; 110us; 14us; 152us; 18us; 104us; 20us; 17us; 22us; 101us; 24us; 49us; 25us; 54us; 27us; 36us; 30us; 42us; 33us; 31us; 34us; 33us; 35us; 64us; 39us; 24us; 41us; 112us; 42us; 114us; 44us; 157us; 45us; 70us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 0us; 16396us; 24us; 16395us; 1us; 7us; 2us; 27us; 3us; 110us; 14us; 152us; 18us; 104us; 20us; 17us; 22us; 101us; 24us; 49us; 25us; 54us; 27us; 36us; 30us; 42us; 33us; 31us; 34us; 33us; 35us; 64us; 39us; 24us; 41us; 112us; 42us; 114us; 44us; 157us; 45us; 70us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 0us; 16397us; 0us; 16398us; 14us; 32768us; 4us; 142us; 5us; 141us; 6us; 135us; 7us; 136us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 13us; 130us; 14us; 131us; 15us; 132us; 16us; 133us; 17us; 134us; 39us; 26us; 0us; 16399us; 13us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 39us; 28us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 0us; 16400us; 14us; 32768us; 4us; 142us; 5us; 141us; 6us; 135us; 7us; 136us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 13us; 130us; 14us; 131us; 15us; 132us; 16us; 133us; 17us; 134us; 39us; 30us; 0us; 16401us; 1us; 32768us; 39us; 32us; 0us; 16402us; 1us; 32768us; 39us; 34us; 0us; 16403us; 0us; 16404us; 1us; 32768us; 18us; 37us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 14us; 32768us; 4us; 142us; 5us; 141us; 6us; 135us; 7us; 136us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 13us; 130us; 14us; 131us; 15us; 132us; 16us; 133us; 17us; 134us; 19us; 39us; 23us; 32768us; 2us; 27us; 3us; 110us; 14us; 152us; 18us; 104us; 20us; 17us; 22us; 101us; 24us; 49us; 25us; 54us; 27us; 36us; 30us; 42us; 33us; 31us; 34us; 33us; 35us; 64us; 39us; 24us; 41us; 112us; 42us; 114us; 44us; 157us; 45us; 70us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 2us; 16412us; 28us; 73us; 29us; 75us; 0us; 16405us; 1us; 32768us; 18us; 43us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 14us; 32768us; 4us; 142us; 5us; 141us; 6us; 135us; 7us; 136us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 13us; 130us; 14us; 131us; 15us; 132us; 16us; 133us; 17us; 134us; 19us; 45us; 1us; 32768us; 20us; 46us; 2us; 16415us; 31us; 84us; 32us; 81us; 1us; 32768us; 21us; 48us; 0us; 16406us; 1us; 32768us; 18us; 50us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 14us; 32768us; 4us; 142us; 5us; 141us; 6us; 135us; 7us; 136us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 13us; 130us; 14us; 131us; 15us; 132us; 16us; 133us; 17us; 134us; 19us; 52us; 23us; 32768us; 2us; 27us; 3us; 110us; 14us; 152us; 18us; 104us; 20us; 17us; 22us; 101us; 24us; 49us; 25us; 54us; 27us; 36us; 30us; 42us; 33us; 31us; 34us; 33us; 35us; 64us; 39us; 24us; 41us; 112us; 42us; 114us; 44us; 157us; 45us; 70us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 0us; 16407us; 1us; 32768us; 18us; 55us; 1us; 32768us; 48us; 56us; 1us; 32768us; 26us; 57us; 1us; 32768us; 43us; 58us; 1us; 32768us; 18us; 59us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 14us; 32768us; 4us; 142us; 5us; 141us; 6us; 135us; 7us; 136us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 13us; 130us; 14us; 131us; 15us; 132us; 16us; 133us; 17us; 134us; 19us; 61us; 1us; 32768us; 19us; 62us; 23us; 32768us; 2us; 27us; 3us; 110us; 14us; 152us; 18us; 104us; 20us; 17us; 22us; 101us; 24us; 49us; 25us; 54us; 27us; 36us; 30us; 42us; 33us; 31us; 34us; 33us; 35us; 64us; 39us; 24us; 41us; 112us; 42us; 114us; 44us; 157us; 45us; 70us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 0us; 16408us; 1us; 32768us; 20us; 17us; 1us; 32768us; 36us; 66us; 1us; 32768us; 20us; 17us; 1us; 16409us; 37us; 68us; 1us; 32768us; 20us; 17us; 0us; 16410us; 1us; 32768us; 48us; 71us; 1us; 32768us; 39us; 72us; 0us; 16411us; 23us; 32768us; 2us; 27us; 3us; 110us; 14us; 152us; 18us; 104us; 20us; 17us; 22us; 101us; 24us; 49us; 25us; 54us; 27us; 36us; 30us; 42us; 33us; 31us; 34us; 33us; 35us; 64us; 39us; 24us; 41us; 112us; 42us; 114us; 44us; 157us; 45us; 70us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 0us; 16413us; 1us; 32768us; 18us; 76us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 14us; 32768us; 4us; 142us; 5us; 141us; 6us; 135us; 7us; 136us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 13us; 130us; 14us; 131us; 15us; 132us; 16us; 133us; 17us; 134us; 19us; 78us; 23us; 32768us; 2us; 27us; 3us; 110us; 14us; 152us; 18us; 104us; 20us; 17us; 22us; 101us; 24us; 49us; 25us; 54us; 27us; 36us; 30us; 42us; 33us; 31us; 34us; 33us; 35us; 64us; 39us; 24us; 41us; 112us; 42us; 114us; 44us; 157us; 45us; 70us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 2us; 16412us; 28us; 73us; 29us; 75us; 0us; 16414us; 1us; 32768us; 40us; 82us; 23us; 32768us; 2us; 27us; 3us; 110us; 14us; 152us; 18us; 104us; 20us; 17us; 22us; 101us; 24us; 49us; 25us; 54us; 27us; 36us; 30us; 42us; 33us; 31us; 34us; 33us; 35us; 64us; 39us; 24us; 41us; 112us; 42us; 114us; 44us; 157us; 45us; 70us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 0us; 16416us; 1us; 32768us; 18us; 85us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 14us; 32768us; 4us; 142us; 5us; 141us; 6us; 135us; 7us; 136us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 13us; 130us; 14us; 131us; 15us; 132us; 16us; 133us; 17us; 134us; 19us; 87us; 1us; 32768us; 40us; 88us; 23us; 32768us; 2us; 27us; 3us; 110us; 14us; 152us; 18us; 104us; 20us; 17us; 22us; 101us; 24us; 49us; 25us; 54us; 27us; 36us; 30us; 42us; 33us; 31us; 34us; 33us; 35us; 64us; 39us; 24us; 41us; 112us; 42us; 114us; 44us; 157us; 45us; 70us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 2us; 16415us; 31us; 84us; 32us; 81us; 0us; 16417us; 2us; 16418us; 12us; 99us; 22us; 95us; 0us; 16419us; 1us; 16419us; 19us; 146us; 1us; 16420us; 18us; 107us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 14us; 32768us; 4us; 142us; 5us; 141us; 6us; 135us; 7us; 136us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 13us; 130us; 14us; 131us; 15us; 132us; 16us; 133us; 17us; 134us; 23us; 97us; 0us; 16421us; 0us; 16422us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 13us; 16423us; 4us; 142us; 5us; 141us; 6us; 135us; 7us; 136us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 13us; 130us; 14us; 131us; 15us; 132us; 16us; 133us; 17us; 134us; 12us; 16443us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 1us; 32768us; 23us; 103us; 0us; 16424us; 12us; 16443us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 1us; 32768us; 19us; 106us; 0us; 16425us; 12us; 16448us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 1us; 32768us; 19us; 109us; 0us; 16426us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 0us; 16427us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 13us; 16428us; 4us; 142us; 5us; 141us; 6us; 135us; 7us; 136us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 13us; 130us; 14us; 131us; 15us; 132us; 16us; 133us; 17us; 134us; 0us; 16429us; 7us; 16430us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 15us; 132us; 16us; 133us; 17us; 134us; 7us; 16431us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 15us; 132us; 16us; 133us; 17us; 134us; 4us; 16432us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 4us; 16433us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 4us; 16434us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 9us; 16435us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 13us; 130us; 14us; 131us; 15us; 132us; 16us; 133us; 17us; 134us; 9us; 16436us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 13us; 130us; 14us; 131us; 15us; 132us; 16us; 133us; 17us; 134us; 0us; 16437us; 0us; 16438us; 0us; 16439us; 0us; 16440us; 11us; 16441us; 6us; 135us; 7us; 136us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 13us; 130us; 14us; 131us; 15us; 132us; 16us; 133us; 17us; 134us; 12us; 16442us; 5us; 141us; 6us; 135us; 7us; 136us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 13us; 130us; 14us; 131us; 15us; 132us; 16us; 133us; 17us; 134us; 14us; 16444us; 4us; 142us; 5us; 141us; 6us; 135us; 7us; 136us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 13us; 130us; 14us; 131us; 15us; 132us; 16us; 133us; 17us; 134us; 38us; 143us; 14us; 16450us; 4us; 142us; 5us; 141us; 6us; 135us; 7us; 136us; 8us; 137us; 9us; 138us; 10us; 139us; 11us; 140us; 13us; 130us; 14us; 131us; 15us; 132us; 16us; 133us; 17us; 134us; 38us; 148us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 12us; 16443us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 0us; 16449us; 12us; 32768us; 3us; 110us; 14us; 152us; 18us; 104us; 22us; 101us; 41us; 112us; 42us; 114us; 44us; 157us; 47us; 156us; 48us; 94us; 49us; 150us; 50us; 151us; 51us; 154us; 0us; 16451us; 0us; 16452us; 0us; 16453us; 2us; 32768us; 49us; 153us; 51us; 155us; 0us; 16454us; 0us; 16455us; 0us; 16456us; 0us; 16457us; 0us; 16458us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 25us; 26us; 28us; 29us; 54us; 55us; 56us; 58us; 60us; 62us; 64us; 66us; 67us; 68us; 70us; 72us; 73us; 98us; 100us; 101us; 126us; 127us; 152us; 153us; 154us; 169us; 170us; 184us; 185us; 200us; 201us; 203us; 204us; 206us; 207us; 208us; 210us; 223us; 238us; 262us; 265us; 266us; 268us; 281us; 296us; 298us; 301us; 303us; 304us; 306us; 319us; 334us; 358us; 359us; 361us; 363us; 365us; 367us; 369us; 382us; 397us; 399us; 423us; 424us; 426us; 428us; 430us; 432us; 434us; 435us; 437us; 439us; 440us; 464us; 465us; 467us; 480us; 495us; 519us; 522us; 523us; 525us; 549us; 550us; 552us; 565us; 580us; 582us; 606us; 609us; 610us; 613us; 614us; 616us; 618us; 631us; 646us; 647us; 648us; 661us; 675us; 688us; 690us; 691us; 704us; 706us; 707us; 720us; 722us; 723us; 736us; 737us; 750us; 764us; 765us; 773us; 781us; 786us; 791us; 796us; 806us; 816us; 817us; 818us; 819us; 820us; 832us; 845us; 860us; 875us; 888us; 901us; 914us; 927us; 940us; 953us; 966us; 979us; 992us; 1005us; 1018us; 1031us; 1044us; 1057us; 1058us; 1059us; 1060us; 1061us; 1074us; 1075us; 1076us; 1077us; 1080us; 1081us; 1082us; 1083us; 1084us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 1us; 6us; 0us; 1us; 1us; 3us; 3us; 0us; 2us; 2us; 1us; 2us; 2us; 3us; 2us; 2us; 1us; 6us; 7us; 5us; 10us; 4us; 6us; 3us; 0us; 2us; 6us; 0us; 3us; 7us; 1us; 1us; 1us; 4us; 1us; 3us; 3us; 3us; 4us; 2us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 0us; 1us; 3us; 1us; 3us; 0us; 1us; 1us; 3us; 1us; 1us; 2us; 1us; 2us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 4us; 5us; 5us; 6us; 6us; 7us; 8us; 8us; 8us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 9us; 10us; 10us; 10us; 11us; 11us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 15us; 15us; 15us; 16us; 16us; 17us; 17us; 18us; 18us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 16391us; 65535us; 65535us; 16393us; 65535us; 65535us; 16394us; 65535us; 16396us; 65535us; 16397us; 16398us; 65535us; 16399us; 65535us; 16400us; 65535us; 16401us; 65535us; 16402us; 65535us; 16403us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 16405us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16406us; 65535us; 65535us; 65535us; 65535us; 16407us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 65535us; 65535us; 16410us; 65535us; 65535us; 16411us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 16419us; 65535us; 65535us; 65535us; 65535us; 16421us; 16422us; 65535us; 65535us; 65535us; 65535us; 16424us; 65535us; 65535us; 16425us; 65535us; 65535us; 16426us; 65535us; 65535us; 65535us; 65535us; 16429us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16445us; 16446us; 16447us; 16449us; 65535us; 16451us; 16452us; 16453us; 65535us; 16454us; 16455us; 16456us; 16457us; 16458us; |]
let _fsyacc_reductions ()  =    [| 
# 467 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 476 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "RubbishPar.fsy"
                                                               Prog _1  
                   )
# 37 "RubbishPar.fsy"
                 : Absyn.program));
# 487 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "RubbishPar.fsy"
                                                               [] 
                   )
# 40 "RubbishPar.fsy"
                 : 'Topdecs));
# 497 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "RubbishPar.fsy"
                                                               _1 :: _2 
                   )
# 41 "RubbishPar.fsy"
                 : 'Topdecs));
# 509 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StatExec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "RubbishPar.fsy"
                                                               Main _1 
                   )
# 44 "RubbishPar.fsy"
                 : 'Topdec));
# 520 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "RubbishPar.fsy"
                                                               Fundec(Some(_2), _4, _6) 
                   )
# 49 "RubbishPar.fsy"
                 : 'Fundec));
# 533 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "RubbishPar.fsy"
                                                               [] 
                   )
# 53 "RubbishPar.fsy"
                 : 'Paramdecs));
# 543 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "RubbishPar.fsy"
                                                               _1 
                   )
# 54 "RubbishPar.fsy"
                 : 'Paramdecs));
# 554 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "RubbishPar.fsy"
                                                               [_1]     
                   )
# 58 "RubbishPar.fsy"
                 : 'Paramdecs1));
# 565 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "RubbishPar.fsy"
                                                               _1 :: _3 
                   )
# 59 "RubbishPar.fsy"
                 : 'Paramdecs1));
# 577 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StatExec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "RubbishPar.fsy"
                                                               Block _2 
                   )
# 63 "RubbishPar.fsy"
                 : 'Block));
# 588 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "RubbishPar.fsy"
                                                               [] 
                   )
# 67 "RubbishPar.fsy"
                 : 'StatExec));
# 598 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StatExec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "RubbishPar.fsy"
                                                               Stmt _1 :: _2 
                   )
# 68 "RubbishPar.fsy"
                 : 'StatExec));
# 610 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StatExec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "RubbishPar.fsy"
                                                               _1::_2        
                   )
# 69 "RubbishPar.fsy"
                 : 'StatExec));
# 622 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "RubbishPar.fsy"
                                                                  ExSemi      
                   )
# 73 "RubbishPar.fsy"
                 : 'Stmt));
# 632 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "RubbishPar.fsy"
                                                                  Expr(_1)    
                   )
# 74 "RubbishPar.fsy"
                 : 'Stmt));
# 643 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "RubbishPar.fsy"
                                                                  Return(None)
                   )
# 75 "RubbishPar.fsy"
                 : 'Stmt));
# 653 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "RubbishPar.fsy"
                                                                  Return(Some(_2))  
                   )
# 76 "RubbishPar.fsy"
                 : 'Stmt));
# 664 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "RubbishPar.fsy"
                                                                  Break       
                   )
# 77 "RubbishPar.fsy"
                 : 'Stmt));
# 674 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "RubbishPar.fsy"
                                                                  Continue    
                   )
# 78 "RubbishPar.fsy"
                 : 'Stmt));
# 684 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "RubbishPar.fsy"
                                                                  _1          
                   )
# 79 "RubbishPar.fsy"
                 : 'Stmt));
# 695 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'IfConJud)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "RubbishPar.fsy"
                                                                  If((Some(_3),_5)::_6)
                   )
# 80 "RubbishPar.fsy"
                 : 'Stmt));
# 708 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'SwConJud)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "RubbishPar.fsy"
                                                                         Switch(_3,_6)
                   )
# 81 "RubbishPar.fsy"
                 : 'Stmt));
# 720 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "RubbishPar.fsy"
                                                                  While(_3,_5) 
                   )
# 82 "RubbishPar.fsy"
                 : 'Stmt));
# 732 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "RubbishPar.fsy"
                                                                            For(_3,_7,_10)
                   )
# 83 "RubbishPar.fsy"
                 : 'Stmt));
# 745 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "RubbishPar.fsy"
                                                                  TryCatchFinal(_2,_4,None) 
                   )
# 84 "RubbishPar.fsy"
                 : 'Stmt));
# 757 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "RubbishPar.fsy"
                                                                  TryCatchFinal(_2,_4,Some(_6))
                   )
# 85 "RubbishPar.fsy"
                 : 'Stmt));
# 770 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "RubbishPar.fsy"
                                                                  Import(_2)
                   )
# 86 "RubbishPar.fsy"
                 : 'Stmt));
# 781 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "RubbishPar.fsy"
                                                                  []          
                   )
# 89 "RubbishPar.fsy"
                 : 'IfConJud));
# 791 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "RubbishPar.fsy"
                                                                  [(None,_2)] 
                   )
# 90 "RubbishPar.fsy"
                 : 'IfConJud));
# 802 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'IfConJud)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "RubbishPar.fsy"
                                                                  (Some(_3),_5)::_6 
                   )
# 91 "RubbishPar.fsy"
                 : 'IfConJud));
# 815 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "RubbishPar.fsy"
                                                                  []          
                   )
# 94 "RubbishPar.fsy"
                 : 'SwConJud));
# 825 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "RubbishPar.fsy"
                                                                  [(None,_3)] 
                   )
# 95 "RubbishPar.fsy"
                 : 'SwConJud));
# 836 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'SwConJud)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "RubbishPar.fsy"
                                                                  (Some(_3),_6)::_7 
                   )
# 97 "RubbishPar.fsy"
                 : 'SwConJud));
# 849 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "RubbishPar.fsy"
                                                                  Access _1
                   )
# 100 "RubbishPar.fsy"
                 : 'Expr));
# 860 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "RubbishPar.fsy"
                                                                  _1       
                   )
# 101 "RubbishPar.fsy"
                 : 'Expr));
# 871 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "RubbishPar.fsy"
                                                                  AccVar _1
                   )
# 104 "RubbishPar.fsy"
                 : 'Access));
# 882 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "RubbishPar.fsy"
                                                                  AccIndex(_1,_3)
                   )
# 105 "RubbishPar.fsy"
                 : 'Access));
# 894 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "RubbishPar.fsy"
                                                               _1                  
                   )
# 108 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 905 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "RubbishPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 109 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 917 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'List)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "RubbishPar.fsy"
                                                               Array(_2)           
                   )
# 110 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 928 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'List)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "RubbishPar.fsy"
                                                               Tuple(_2)           
                   )
# 111 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 939 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "RubbishPar.fsy"
                                                               Call(_1, _3)        
                   )
# 112 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 951 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "RubbishPar.fsy"
                                                               Prim1("!", _2)      
                   )
# 113 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 962 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "RubbishPar.fsy"
                                                               Prim1("printi", _2) 
                   )
# 114 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 973 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "RubbishPar.fsy"
                                                               Prim1("printc", CstI 10) 
                   )
# 115 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 983 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "RubbishPar.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 116 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 995 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "RubbishPar.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 117 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1007 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "RubbishPar.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 118 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1019 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "RubbishPar.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 119 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1031 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "RubbishPar.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 120 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1043 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "RubbishPar.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 121 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1055 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "RubbishPar.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 122 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1067 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "RubbishPar.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 123 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1079 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "RubbishPar.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 124 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1091 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "RubbishPar.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 125 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1103 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "RubbishPar.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 126 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1115 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "RubbishPar.fsy"
                                                               Andalso(_1, _3)     
                   )
# 127 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1127 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "RubbishPar.fsy"
                                                               Orelse(_1, _3)      
                   )
# 128 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1139 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "RubbishPar.fsy"
                                                              []
                   )
# 132 "RubbishPar.fsy"
                 : 'List));
# 1149 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "RubbishPar.fsy"
                                                              [_1]
                   )
# 133 "RubbishPar.fsy"
                 : 'List));
# 1160 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'List)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "RubbishPar.fsy"
                                                              _1::_3
                   )
# 134 "RubbishPar.fsy"
                 : 'List));
# 1172 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "RubbishPar.fsy"
                                                               _1                  
                   )
# 137 "RubbishPar.fsy"
                 : 'AtExprNotAccess));
# 1183 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "RubbishPar.fsy"
                                                               _2                  
                   )
# 138 "RubbishPar.fsy"
                 : 'AtExprNotAccess));
# 1194 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "RubbishPar.fsy"
                                                               []       
                   )
# 141 "RubbishPar.fsy"
                 : 'Exprs));
# 1204 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "RubbishPar.fsy"
                                                               _1       
                   )
# 142 "RubbishPar.fsy"
                 : 'Exprs));
# 1215 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "RubbishPar.fsy"
                                                               [_1]     
                   )
# 146 "RubbishPar.fsy"
                 : 'Exprs1));
# 1226 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "RubbishPar.fsy"
                                                               _1 :: _3 
                   )
# 147 "RubbishPar.fsy"
                 : 'Exprs1));
# 1238 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "RubbishPar.fsy"
                                                               CstI _1       
                   )
# 151 "RubbishPar.fsy"
                 : 'Const));
# 1249 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "RubbishPar.fsy"
                                                               CstI _1       
                   )
# 152 "RubbishPar.fsy"
                 : 'Const));
# 1260 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "RubbishPar.fsy"
                                                               CstI -_2      
                   )
# 153 "RubbishPar.fsy"
                 : 'Const));
# 1271 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "RubbishPar.fsy"
                                                               CstF _1       
                   )
# 154 "RubbishPar.fsy"
                 : 'Const));
# 1282 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "RubbishPar.fsy"
                                                               CstF -_2      
                   )
# 155 "RubbishPar.fsy"
                 : 'Const));
# 1293 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "RubbishPar.fsy"
                                                               CstS _1       
                   )
# 156 "RubbishPar.fsy"
                 : 'Const));
# 1304 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "RubbishPar.fsy"
                                                               Null       
                   )
# 157 "RubbishPar.fsy"
                 : 'Const));
|]
# 1315 "RubbishPar.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 55;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
