// Implementation file for parser generated by fsyacc
module RubbishPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "RubbishPar.fsy"

  (* File Rubbish/RubbishPar.fsy
     Parser specification for the simple expression language.
   *)
open Absyn

# 13 "RubbishPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | DEF
  | RETURN
  | NOT
  | SEQOR
  | SEQAND
  | SEQXOR
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | ASSIGN
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | EXPO
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | WHILE
  | FOR
  | IN
  | IF
  | ELSE
  | ELIF
  | SWITCH
  | CASE
  | DEFAULT
  | BREAK
  | CONTINUE
  | TRY
  | CATCH
  | FINALLY
  | CLASS
  | COMMA
  | SEMI
  | COLON
  | PRINT
  | PRINTLN
  | RANGE
  | NULL
  | IMPORT
  | LAMBDA
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTINT of (int)
  | CSTBOOL of (int)
  | CSTFLOAT of (float)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_DEF
    | TOKEN_RETURN
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_SEQXOR
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_ASSIGN
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_EXPO
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_IN
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_ELIF
    | TOKEN_SWITCH
    | TOKEN_CASE
    | TOKEN_DEFAULT
    | TOKEN_BREAK
    | TOKEN_CONTINUE
    | TOKEN_TRY
    | TOKEN_CATCH
    | TOKEN_FINALLY
    | TOKEN_CLASS
    | TOKEN_COMMA
    | TOKEN_SEMI
    | TOKEN_COLON
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RANGE
    | TOKEN_NULL
    | TOKEN_IMPORT
    | TOKEN_LAMBDA
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_CSTFLOAT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Fundec
    | NONTERM_Classdec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StatExec
    | NONTERM_Stmt
    | NONTERM_IfConJud
    | NONTERM_SwConJud
    | NONTERM_Expr
    | NONTERM_Access
    | NONTERM_ExprNotAccess
    | NONTERM_List
    | NONTERM_AtExprNotAccess
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | DEF  -> 1 
  | RETURN  -> 2 
  | NOT  -> 3 
  | SEQOR  -> 4 
  | SEQAND  -> 5 
  | SEQXOR  -> 6 
  | EQ  -> 7 
  | NE  -> 8 
  | GT  -> 9 
  | LT  -> 10 
  | GE  -> 11 
  | LE  -> 12 
  | ASSIGN  -> 13 
  | PLUS  -> 14 
  | MINUS  -> 15 
  | TIMES  -> 16 
  | DIV  -> 17 
  | MOD  -> 18 
  | EXPO  -> 19 
  | LPAR  -> 20 
  | RPAR  -> 21 
  | LBRACE  -> 22 
  | RBRACE  -> 23 
  | LBRACK  -> 24 
  | RBRACK  -> 25 
  | WHILE  -> 26 
  | FOR  -> 27 
  | IN  -> 28 
  | IF  -> 29 
  | ELSE  -> 30 
  | ELIF  -> 31 
  | SWITCH  -> 32 
  | CASE  -> 33 
  | DEFAULT  -> 34 
  | BREAK  -> 35 
  | CONTINUE  -> 36 
  | TRY  -> 37 
  | CATCH  -> 38 
  | FINALLY  -> 39 
  | CLASS  -> 40 
  | COMMA  -> 41 
  | SEMI  -> 42 
  | COLON  -> 43 
  | PRINT  -> 44 
  | PRINTLN  -> 45 
  | RANGE  -> 46 
  | NULL  -> 47 
  | IMPORT  -> 48 
  | LAMBDA  -> 49 
  | CSTSTRING _ -> 50 
  | NAME _ -> 51 
  | CSTINT _ -> 52 
  | CSTBOOL _ -> 53 
  | CSTFLOAT _ -> 54 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_DEF 
  | 2 -> TOKEN_RETURN 
  | 3 -> TOKEN_NOT 
  | 4 -> TOKEN_SEQOR 
  | 5 -> TOKEN_SEQAND 
  | 6 -> TOKEN_SEQXOR 
  | 7 -> TOKEN_EQ 
  | 8 -> TOKEN_NE 
  | 9 -> TOKEN_GT 
  | 10 -> TOKEN_LT 
  | 11 -> TOKEN_GE 
  | 12 -> TOKEN_LE 
  | 13 -> TOKEN_ASSIGN 
  | 14 -> TOKEN_PLUS 
  | 15 -> TOKEN_MINUS 
  | 16 -> TOKEN_TIMES 
  | 17 -> TOKEN_DIV 
  | 18 -> TOKEN_MOD 
  | 19 -> TOKEN_EXPO 
  | 20 -> TOKEN_LPAR 
  | 21 -> TOKEN_RPAR 
  | 22 -> TOKEN_LBRACE 
  | 23 -> TOKEN_RBRACE 
  | 24 -> TOKEN_LBRACK 
  | 25 -> TOKEN_RBRACK 
  | 26 -> TOKEN_WHILE 
  | 27 -> TOKEN_FOR 
  | 28 -> TOKEN_IN 
  | 29 -> TOKEN_IF 
  | 30 -> TOKEN_ELSE 
  | 31 -> TOKEN_ELIF 
  | 32 -> TOKEN_SWITCH 
  | 33 -> TOKEN_CASE 
  | 34 -> TOKEN_DEFAULT 
  | 35 -> TOKEN_BREAK 
  | 36 -> TOKEN_CONTINUE 
  | 37 -> TOKEN_TRY 
  | 38 -> TOKEN_CATCH 
  | 39 -> TOKEN_FINALLY 
  | 40 -> TOKEN_CLASS 
  | 41 -> TOKEN_COMMA 
  | 42 -> TOKEN_SEMI 
  | 43 -> TOKEN_COLON 
  | 44 -> TOKEN_PRINT 
  | 45 -> TOKEN_PRINTLN 
  | 46 -> TOKEN_RANGE 
  | 47 -> TOKEN_NULL 
  | 48 -> TOKEN_IMPORT 
  | 49 -> TOKEN_LAMBDA 
  | 50 -> TOKEN_CSTSTRING 
  | 51 -> TOKEN_NAME 
  | 52 -> TOKEN_CSTINT 
  | 53 -> TOKEN_CSTBOOL 
  | 54 -> TOKEN_CSTFLOAT 
  | 57 -> TOKEN_end_of_input
  | 55 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Fundec 
    | 6 -> NONTERM_Classdec 
    | 7 -> NONTERM_Paramdecs 
    | 8 -> NONTERM_Paramdecs 
    | 9 -> NONTERM_Paramdecs1 
    | 10 -> NONTERM_Paramdecs1 
    | 11 -> NONTERM_Block 
    | 12 -> NONTERM_StatExec 
    | 13 -> NONTERM_StatExec 
    | 14 -> NONTERM_StatExec 
    | 15 -> NONTERM_StatExec 
    | 16 -> NONTERM_Stmt 
    | 17 -> NONTERM_Stmt 
    | 18 -> NONTERM_Stmt 
    | 19 -> NONTERM_Stmt 
    | 20 -> NONTERM_Stmt 
    | 21 -> NONTERM_Stmt 
    | 22 -> NONTERM_Stmt 
    | 23 -> NONTERM_Stmt 
    | 24 -> NONTERM_Stmt 
    | 25 -> NONTERM_Stmt 
    | 26 -> NONTERM_Stmt 
    | 27 -> NONTERM_Stmt 
    | 28 -> NONTERM_Stmt 
    | 29 -> NONTERM_Stmt 
    | 30 -> NONTERM_Stmt 
    | 31 -> NONTERM_IfConJud 
    | 32 -> NONTERM_IfConJud 
    | 33 -> NONTERM_IfConJud 
    | 34 -> NONTERM_SwConJud 
    | 35 -> NONTERM_SwConJud 
    | 36 -> NONTERM_SwConJud 
    | 37 -> NONTERM_Expr 
    | 38 -> NONTERM_Expr 
    | 39 -> NONTERM_Access 
    | 40 -> NONTERM_Access 
    | 41 -> NONTERM_ExprNotAccess 
    | 42 -> NONTERM_ExprNotAccess 
    | 43 -> NONTERM_ExprNotAccess 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_ExprNotAccess 
    | 56 -> NONTERM_ExprNotAccess 
    | 57 -> NONTERM_ExprNotAccess 
    | 58 -> NONTERM_ExprNotAccess 
    | 59 -> NONTERM_ExprNotAccess 
    | 60 -> NONTERM_ExprNotAccess 
    | 61 -> NONTERM_ExprNotAccess 
    | 62 -> NONTERM_ExprNotAccess 
    | 63 -> NONTERM_ExprNotAccess 
    | 64 -> NONTERM_List 
    | 65 -> NONTERM_List 
    | 66 -> NONTERM_List 
    | 67 -> NONTERM_AtExprNotAccess 
    | 68 -> NONTERM_AtExprNotAccess 
    | 69 -> NONTERM_Exprs 
    | 70 -> NONTERM_Exprs 
    | 71 -> NONTERM_Exprs1 
    | 72 -> NONTERM_Exprs1 
    | 73 -> NONTERM_Const 
    | 74 -> NONTERM_Const 
    | 75 -> NONTERM_Const 
    | 76 -> NONTERM_Const 
    | 77 -> NONTERM_Const 
    | 78 -> NONTERM_Const 
    | 79 -> NONTERM_Const 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 57 
let _fsyacc_tagOfErrorTerminal = 55

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | DEF  -> "DEF" 
  | RETURN  -> "RETURN" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | SEQXOR  -> "SEQXOR" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | ASSIGN  -> "ASSIGN" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | EXPO  -> "EXPO" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | WHILE  -> "WHILE" 
  | FOR  -> "FOR" 
  | IN  -> "IN" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | ELIF  -> "ELIF" 
  | SWITCH  -> "SWITCH" 
  | CASE  -> "CASE" 
  | DEFAULT  -> "DEFAULT" 
  | BREAK  -> "BREAK" 
  | CONTINUE  -> "CONTINUE" 
  | TRY  -> "TRY" 
  | CATCH  -> "CATCH" 
  | FINALLY  -> "FINALLY" 
  | CLASS  -> "CLASS" 
  | COMMA  -> "COMMA" 
  | SEMI  -> "SEMI" 
  | COLON  -> "COLON" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | RANGE  -> "RANGE" 
  | NULL  -> "NULL" 
  | IMPORT  -> "IMPORT" 
  | LAMBDA  -> "LAMBDA" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 
  | CSTFLOAT _ -> "CSTFLOAT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | DEF  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | SEQXOR  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | EXPO  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | IN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | ELIF  -> (null : System.Object) 
  | SWITCH  -> (null : System.Object) 
  | CASE  -> (null : System.Object) 
  | DEFAULT  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | CONTINUE  -> (null : System.Object) 
  | TRY  -> (null : System.Object) 
  | CATCH  -> (null : System.Object) 
  | FINALLY  -> (null : System.Object) 
  | CLASS  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | RANGE  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | IMPORT  -> (null : System.Object) 
  | LAMBDA  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTFLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 4us; 4us; 4us; 6us; 65535us; 0us; 28us; 4us; 28us; 23us; 28us; 26us; 28us; 28us; 28us; 30us; 28us; 6us; 65535us; 0us; 30us; 4us; 30us; 23us; 30us; 26us; 30us; 28us; 30us; 30us; 30us; 3us; 65535us; 9us; 10us; 15us; 16us; 81us; 82us; 4us; 65535us; 9us; 19us; 15us; 19us; 21us; 22us; 81us; 19us; 18us; 65535us; 0us; 43us; 4us; 43us; 11us; 12us; 17us; 18us; 23us; 43us; 26us; 43us; 28us; 43us; 30us; 43us; 47us; 43us; 60us; 43us; 70us; 43us; 72us; 73us; 74us; 75us; 76us; 77us; 85us; 43us; 90us; 43us; 94us; 43us; 100us; 43us; 6us; 65535us; 0us; 6us; 4us; 6us; 23us; 24us; 26us; 27us; 28us; 29us; 30us; 31us; 13us; 65535us; 0us; 26us; 4us; 26us; 23us; 26us; 26us; 26us; 28us; 26us; 30us; 26us; 47us; 48us; 60us; 61us; 70us; 71us; 85us; 86us; 90us; 91us; 94us; 95us; 100us; 101us; 2us; 65535us; 48us; 49us; 91us; 92us; 2us; 65535us; 54us; 55us; 101us; 102us; 45us; 65535us; 0us; 33us; 4us; 33us; 23us; 33us; 26us; 33us; 28us; 33us; 30us; 33us; 35us; 37us; 45us; 46us; 47us; 33us; 51us; 52us; 58us; 59us; 60us; 33us; 67us; 68us; 70us; 33us; 83us; 84us; 85us; 33us; 88us; 89us; 90us; 33us; 94us; 33us; 97us; 98us; 100us; 33us; 107us; 108us; 111us; 112us; 113us; 142us; 116us; 142us; 119us; 143us; 122us; 123us; 124us; 125us; 144us; 127us; 145us; 128us; 146us; 129us; 147us; 130us; 148us; 131us; 149us; 132us; 150us; 133us; 151us; 134us; 152us; 135us; 153us; 136us; 154us; 137us; 155us; 138us; 156us; 139us; 157us; 140us; 158us; 141us; 159us; 142us; 164us; 143us; 45us; 65535us; 0us; 103us; 4us; 103us; 23us; 103us; 26us; 103us; 28us; 103us; 30us; 103us; 35us; 103us; 45us; 103us; 47us; 103us; 51us; 103us; 58us; 103us; 60us; 103us; 67us; 103us; 70us; 103us; 83us; 103us; 85us; 103us; 88us; 103us; 90us; 103us; 94us; 103us; 97us; 103us; 100us; 103us; 107us; 103us; 111us; 103us; 113us; 103us; 116us; 103us; 119us; 103us; 122us; 103us; 124us; 103us; 144us; 103us; 145us; 103us; 146us; 103us; 147us; 103us; 148us; 103us; 149us; 103us; 150us; 103us; 151us; 103us; 152us; 103us; 153us; 103us; 154us; 103us; 155us; 103us; 156us; 103us; 157us; 103us; 158us; 103us; 159us; 103us; 164us; 103us; 45us; 65535us; 0us; 104us; 4us; 104us; 23us; 104us; 26us; 104us; 28us; 104us; 30us; 104us; 35us; 104us; 45us; 104us; 47us; 104us; 51us; 104us; 58us; 104us; 60us; 104us; 67us; 104us; 70us; 104us; 83us; 104us; 85us; 104us; 88us; 104us; 90us; 104us; 94us; 104us; 97us; 104us; 100us; 104us; 107us; 104us; 111us; 104us; 113us; 104us; 116us; 105us; 119us; 104us; 122us; 104us; 124us; 104us; 144us; 104us; 145us; 104us; 146us; 104us; 147us; 104us; 148us; 104us; 149us; 104us; 150us; 104us; 151us; 104us; 152us; 104us; 153us; 104us; 154us; 104us; 155us; 104us; 156us; 104us; 157us; 104us; 158us; 104us; 159us; 104us; 164us; 104us; 3us; 65535us; 113us; 114us; 116us; 117us; 159us; 160us; 45us; 65535us; 0us; 110us; 4us; 110us; 23us; 110us; 26us; 110us; 28us; 110us; 30us; 110us; 35us; 110us; 45us; 110us; 47us; 110us; 51us; 110us; 58us; 110us; 60us; 110us; 67us; 110us; 70us; 110us; 83us; 110us; 85us; 110us; 88us; 110us; 90us; 110us; 94us; 110us; 97us; 110us; 100us; 110us; 107us; 110us; 111us; 110us; 113us; 110us; 116us; 110us; 119us; 110us; 122us; 110us; 124us; 110us; 144us; 110us; 145us; 110us; 146us; 110us; 147us; 110us; 148us; 110us; 149us; 110us; 150us; 110us; 151us; 110us; 152us; 110us; 153us; 110us; 154us; 110us; 155us; 110us; 156us; 110us; 157us; 110us; 158us; 110us; 159us; 110us; 164us; 110us; 1us; 65535us; 119us; 120us; 2us; 65535us; 119us; 163us; 164us; 165us; 45us; 65535us; 0us; 161us; 4us; 161us; 23us; 161us; 26us; 161us; 28us; 161us; 30us; 161us; 35us; 161us; 45us; 161us; 47us; 161us; 51us; 161us; 58us; 161us; 60us; 161us; 67us; 161us; 70us; 161us; 83us; 161us; 85us; 161us; 88us; 161us; 90us; 161us; 94us; 161us; 97us; 161us; 100us; 161us; 107us; 161us; 111us; 161us; 113us; 161us; 116us; 161us; 119us; 161us; 122us; 161us; 124us; 161us; 144us; 161us; 145us; 161us; 146us; 161us; 147us; 161us; 148us; 161us; 149us; 161us; 150us; 161us; 151us; 161us; 152us; 161us; 153us; 161us; 154us; 161us; 155us; 161us; 156us; 161us; 157us; 161us; 158us; 161us; 159us; 161us; 164us; 161us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 16us; 23us; 27us; 32us; 51us; 58us; 72us; 75us; 78us; 124us; 170us; 216us; 220us; 266us; 268us; 271us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 8us; 2us; 9us; 10us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 16us; 16us; 17us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 17us; 2us; 18us; 19us; 1us; 18us; 16us; 19us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 23us; 16us; 23us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 16us; 24us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 16us; 25us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 26us; 16us; 26us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 26us; 1us; 26us; 1us; 26us; 2us; 27us; 28us; 2us; 27us; 28us; 2us; 27us; 28us; 2us; 27us; 28us; 1us; 28us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 16us; 30us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 16us; 33us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 35us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 36us; 16us; 36us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 36us; 3us; 37us; 40us; 42us; 1us; 38us; 2us; 38us; 68us; 2us; 39us; 45us; 1us; 40us; 16us; 40us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 40us; 1us; 41us; 1us; 42us; 16us; 42us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 43us; 1us; 43us; 1us; 43us; 2us; 44us; 68us; 1us; 44us; 1us; 44us; 1us; 45us; 1us; 45us; 1us; 45us; 1us; 46us; 16us; 46us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 47us; 16us; 47us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 1us; 48us; 16us; 49us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 16us; 49us; 50us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 16us; 49us; 50us; 51us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 16us; 49us; 50us; 51us; 52us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 16us; 49us; 50us; 51us; 52us; 53us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 16us; 49us; 50us; 51us; 52us; 53us; 54us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 16us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 16us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 16us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 16us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 58us; 59us; 60us; 61us; 62us; 63us; 16us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 59us; 60us; 61us; 62us; 63us; 16us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 60us; 61us; 62us; 63us; 16us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 61us; 62us; 63us; 16us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 62us; 63us; 16us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 63us; 17us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 65us; 66us; 17us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 59us; 60us; 61us; 62us; 63us; 71us; 72us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 66us; 1us; 66us; 1us; 67us; 1us; 68us; 1us; 70us; 1us; 72us; 1us; 72us; 1us; 73us; 1us; 74us; 2us; 75us; 77us; 1us; 75us; 1us; 76us; 1us; 77us; 1us; 78us; 1us; 79us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 84us; 86us; 89us; 91us; 108us; 110us; 112us; 114us; 116us; 118us; 120us; 122us; 124us; 141us; 143us; 145us; 147us; 149us; 151us; 168us; 170us; 172us; 174us; 176us; 178us; 180us; 197us; 199us; 201us; 203us; 205us; 207us; 209us; 211us; 213us; 230us; 232us; 234us; 236us; 239us; 242us; 245us; 248us; 250us; 252us; 254us; 256us; 258us; 260us; 262us; 264us; 281us; 283us; 285us; 287us; 289us; 306us; 308us; 310us; 312us; 314us; 316us; 318us; 320us; 322us; 339us; 341us; 343us; 345us; 347us; 351us; 353us; 356us; 359us; 361us; 378us; 380us; 382us; 384us; 401us; 403us; 405us; 407us; 410us; 412us; 414us; 416us; 418us; 420us; 422us; 439us; 441us; 458us; 460us; 477us; 494us; 511us; 528us; 545us; 562us; 579us; 596us; 613us; 630us; 647us; 664us; 681us; 698us; 715us; 733us; 751us; 753us; 755us; 757us; 759us; 761us; 763us; 765us; 767us; 769us; 771us; 773us; 775us; 777us; 779us; 781us; 783us; 785us; 787us; 789us; 791us; 793us; 795us; 797us; 799us; 802us; 804us; 806us; 808us; 810us; |]
let _fsyacc_action_rows = 174
let _fsyacc_actionTableElements = [|26us; 16386us; 1us; 7us; 2us; 35us; 3us; 122us; 15us; 168us; 20us; 116us; 22us; 23us; 24us; 113us; 26us; 57us; 27us; 62us; 29us; 44us; 32us; 50us; 35us; 39us; 36us; 41us; 37us; 72us; 40us; 13us; 42us; 32us; 44us; 124us; 45us; 126us; 47us; 173us; 48us; 78us; 49us; 81us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 26us; 16386us; 1us; 7us; 2us; 35us; 3us; 122us; 15us; 168us; 20us; 116us; 22us; 23us; 24us; 113us; 26us; 57us; 27us; 62us; 29us; 44us; 32us; 50us; 35us; 39us; 36us; 41us; 37us; 72us; 40us; 13us; 42us; 32us; 44us; 124us; 45us; 126us; 47us; 173us; 48us; 78us; 49us; 81us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 0us; 16387us; 0us; 16388us; 1us; 32768us; 51us; 8us; 1us; 32768us; 20us; 9us; 1us; 16391us; 51us; 20us; 1us; 32768us; 21us; 11us; 1us; 32768us; 22us; 23us; 0us; 16389us; 1us; 32768us; 51us; 14us; 1us; 32768us; 20us; 15us; 1us; 16391us; 51us; 20us; 1us; 32768us; 21us; 17us; 1us; 32768us; 22us; 23us; 0us; 16390us; 0us; 16392us; 1us; 16393us; 41us; 21us; 1us; 32768us; 51us; 20us; 0us; 16394us; 26us; 16396us; 1us; 7us; 2us; 35us; 3us; 122us; 15us; 168us; 20us; 116us; 22us; 23us; 24us; 113us; 26us; 57us; 27us; 62us; 29us; 44us; 32us; 50us; 35us; 39us; 36us; 41us; 37us; 72us; 40us; 13us; 42us; 32us; 44us; 124us; 45us; 126us; 47us; 173us; 48us; 78us; 49us; 81us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 1us; 32768us; 23us; 25us; 0us; 16395us; 26us; 16396us; 1us; 7us; 2us; 35us; 3us; 122us; 15us; 168us; 20us; 116us; 22us; 23us; 24us; 113us; 26us; 57us; 27us; 62us; 29us; 44us; 32us; 50us; 35us; 39us; 36us; 41us; 37us; 72us; 40us; 13us; 42us; 32us; 44us; 124us; 45us; 126us; 47us; 173us; 48us; 78us; 49us; 81us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 0us; 16397us; 26us; 16396us; 1us; 7us; 2us; 35us; 3us; 122us; 15us; 168us; 20us; 116us; 22us; 23us; 24us; 113us; 26us; 57us; 27us; 62us; 29us; 44us; 32us; 50us; 35us; 39us; 36us; 41us; 37us; 72us; 40us; 13us; 42us; 32us; 44us; 124us; 45us; 126us; 47us; 173us; 48us; 78us; 49us; 81us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 0us; 16398us; 26us; 16396us; 1us; 7us; 2us; 35us; 3us; 122us; 15us; 168us; 20us; 116us; 22us; 23us; 24us; 113us; 26us; 57us; 27us; 62us; 29us; 44us; 32us; 50us; 35us; 39us; 36us; 41us; 37us; 72us; 40us; 13us; 42us; 32us; 44us; 124us; 45us; 126us; 47us; 173us; 48us; 78us; 49us; 81us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 0us; 16399us; 0us; 16400us; 16us; 32768us; 4us; 157us; 5us; 156us; 6us; 158us; 7us; 150us; 8us; 151us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 42us; 34us; 0us; 16401us; 13us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 42us; 36us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 0us; 16402us; 16us; 32768us; 4us; 157us; 5us; 156us; 6us; 158us; 7us; 150us; 8us; 151us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 42us; 38us; 0us; 16403us; 1us; 32768us; 42us; 40us; 0us; 16404us; 1us; 32768us; 42us; 42us; 0us; 16405us; 0us; 16406us; 1us; 32768us; 20us; 45us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 16us; 32768us; 4us; 157us; 5us; 156us; 6us; 158us; 7us; 150us; 8us; 151us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 21us; 47us; 24us; 32768us; 2us; 35us; 3us; 122us; 15us; 168us; 20us; 116us; 22us; 23us; 24us; 113us; 26us; 57us; 27us; 62us; 29us; 44us; 32us; 50us; 35us; 39us; 36us; 41us; 37us; 72us; 42us; 32us; 44us; 124us; 45us; 126us; 47us; 173us; 48us; 78us; 49us; 81us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 2us; 16415us; 30us; 85us; 31us; 87us; 0us; 16407us; 1us; 32768us; 20us; 51us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 16us; 32768us; 4us; 157us; 5us; 156us; 6us; 158us; 7us; 150us; 8us; 151us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 21us; 53us; 1us; 32768us; 22us; 54us; 2us; 16418us; 33us; 96us; 34us; 93us; 1us; 32768us; 23us; 56us; 0us; 16408us; 1us; 32768us; 20us; 58us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 16us; 32768us; 4us; 157us; 5us; 156us; 6us; 158us; 7us; 150us; 8us; 151us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 21us; 60us; 24us; 32768us; 2us; 35us; 3us; 122us; 15us; 168us; 20us; 116us; 22us; 23us; 24us; 113us; 26us; 57us; 27us; 62us; 29us; 44us; 32us; 50us; 35us; 39us; 36us; 41us; 37us; 72us; 42us; 32us; 44us; 124us; 45us; 126us; 47us; 173us; 48us; 78us; 49us; 81us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 0us; 16409us; 1us; 32768us; 20us; 63us; 1us; 32768us; 51us; 64us; 1us; 32768us; 28us; 65us; 1us; 32768us; 46us; 66us; 1us; 32768us; 20us; 67us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 16us; 32768us; 4us; 157us; 5us; 156us; 6us; 158us; 7us; 150us; 8us; 151us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 21us; 69us; 1us; 32768us; 21us; 70us; 24us; 32768us; 2us; 35us; 3us; 122us; 15us; 168us; 20us; 116us; 22us; 23us; 24us; 113us; 26us; 57us; 27us; 62us; 29us; 44us; 32us; 50us; 35us; 39us; 36us; 41us; 37us; 72us; 42us; 32us; 44us; 124us; 45us; 126us; 47us; 173us; 48us; 78us; 49us; 81us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 0us; 16410us; 1us; 32768us; 22us; 23us; 1us; 32768us; 38us; 74us; 1us; 32768us; 22us; 23us; 1us; 16411us; 39us; 76us; 1us; 32768us; 22us; 23us; 0us; 16412us; 1us; 32768us; 51us; 79us; 1us; 32768us; 42us; 80us; 0us; 16413us; 1us; 16391us; 51us; 20us; 1us; 32768us; 43us; 83us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 15us; 16414us; 4us; 157us; 5us; 156us; 6us; 158us; 7us; 150us; 8us; 151us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 24us; 32768us; 2us; 35us; 3us; 122us; 15us; 168us; 20us; 116us; 22us; 23us; 24us; 113us; 26us; 57us; 27us; 62us; 29us; 44us; 32us; 50us; 35us; 39us; 36us; 41us; 37us; 72us; 42us; 32us; 44us; 124us; 45us; 126us; 47us; 173us; 48us; 78us; 49us; 81us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 0us; 16416us; 1us; 32768us; 20us; 88us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 16us; 32768us; 4us; 157us; 5us; 156us; 6us; 158us; 7us; 150us; 8us; 151us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 21us; 90us; 24us; 32768us; 2us; 35us; 3us; 122us; 15us; 168us; 20us; 116us; 22us; 23us; 24us; 113us; 26us; 57us; 27us; 62us; 29us; 44us; 32us; 50us; 35us; 39us; 36us; 41us; 37us; 72us; 42us; 32us; 44us; 124us; 45us; 126us; 47us; 173us; 48us; 78us; 49us; 81us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 2us; 16415us; 30us; 85us; 31us; 87us; 0us; 16417us; 1us; 32768us; 43us; 94us; 24us; 32768us; 2us; 35us; 3us; 122us; 15us; 168us; 20us; 116us; 22us; 23us; 24us; 113us; 26us; 57us; 27us; 62us; 29us; 44us; 32us; 50us; 35us; 39us; 36us; 41us; 37us; 72us; 42us; 32us; 44us; 124us; 45us; 126us; 47us; 173us; 48us; 78us; 49us; 81us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 0us; 16419us; 1us; 32768us; 20us; 97us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 16us; 32768us; 4us; 157us; 5us; 156us; 6us; 158us; 7us; 150us; 8us; 151us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 21us; 99us; 1us; 32768us; 43us; 100us; 24us; 32768us; 2us; 35us; 3us; 122us; 15us; 168us; 20us; 116us; 22us; 23us; 24us; 113us; 26us; 57us; 27us; 62us; 29us; 44us; 32us; 50us; 35us; 39us; 36us; 41us; 37us; 72us; 42us; 32us; 44us; 124us; 45us; 126us; 47us; 173us; 48us; 78us; 49us; 81us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 2us; 16418us; 33us; 96us; 34us; 93us; 0us; 16420us; 2us; 16421us; 13us; 111us; 24us; 107us; 0us; 16422us; 1us; 16422us; 21us; 162us; 1us; 16423us; 20us; 119us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 16us; 32768us; 4us; 157us; 5us; 156us; 6us; 158us; 7us; 150us; 8us; 151us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 25us; 109us; 0us; 16424us; 0us; 16425us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 15us; 16426us; 4us; 157us; 5us; 156us; 6us; 158us; 7us; 150us; 8us; 151us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 12us; 16448us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 1us; 32768us; 25us; 115us; 0us; 16427us; 12us; 16448us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 1us; 32768us; 21us; 118us; 0us; 16428us; 12us; 16453us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 1us; 32768us; 21us; 121us; 0us; 16429us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 1us; 16430us; 19us; 147us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 15us; 16431us; 4us; 157us; 5us; 156us; 6us; 158us; 7us; 150us; 8us; 151us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 0us; 16432us; 8us; 16433us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 8us; 16434us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 5us; 16435us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 19us; 147us; 15us; 16436us; 4us; 157us; 5us; 156us; 6us; 158us; 7us; 150us; 8us; 151us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 5us; 16437us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 19us; 147us; 5us; 16438us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 19us; 147us; 10us; 16439us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 10us; 16440us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 1us; 16441us; 19us; 147us; 1us; 16442us; 19us; 147us; 1us; 16443us; 19us; 147us; 1us; 16444us; 19us; 147us; 13us; 16445us; 6us; 158us; 7us; 150us; 8us; 151us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 14us; 16446us; 5us; 156us; 6us; 158us; 7us; 150us; 8us; 151us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 12us; 16447us; 7us; 150us; 8us; 151us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 16us; 16449us; 4us; 157us; 5us; 156us; 6us; 158us; 7us; 150us; 8us; 151us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 41us; 159us; 16us; 16455us; 4us; 157us; 5us; 156us; 6us; 158us; 7us; 150us; 8us; 151us; 9us; 152us; 10us; 153us; 11us; 154us; 12us; 155us; 14us; 144us; 15us; 145us; 16us; 146us; 17us; 148us; 18us; 149us; 19us; 147us; 41us; 164us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 12us; 16448us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 0us; 16450us; 0us; 16451us; 0us; 16452us; 0us; 16454us; 12us; 32768us; 3us; 122us; 15us; 168us; 20us; 116us; 24us; 113us; 44us; 124us; 45us; 126us; 47us; 173us; 50us; 172us; 51us; 106us; 52us; 166us; 53us; 167us; 54us; 170us; 0us; 16456us; 0us; 16457us; 0us; 16458us; 2us; 32768us; 52us; 169us; 54us; 171us; 0us; 16459us; 0us; 16460us; 0us; 16461us; 0us; 16462us; 0us; 16463us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 27us; 28us; 30us; 31us; 58us; 59us; 60us; 62us; 64us; 66us; 68us; 70us; 71us; 73us; 75us; 77us; 79us; 81us; 82us; 83us; 85us; 87us; 88us; 115us; 117us; 118us; 145us; 146us; 173us; 174us; 201us; 202us; 203us; 220us; 221us; 235us; 236us; 253us; 254us; 256us; 257us; 259us; 260us; 261us; 263us; 276us; 293us; 318us; 321us; 322us; 324us; 337us; 354us; 356us; 359us; 361us; 362us; 364us; 377us; 394us; 419us; 420us; 422us; 424us; 426us; 428us; 430us; 443us; 460us; 462us; 487us; 488us; 490us; 492us; 494us; 496us; 498us; 499us; 501us; 503us; 504us; 506us; 508us; 521us; 537us; 562us; 563us; 565us; 578us; 595us; 620us; 623us; 624us; 626us; 651us; 652us; 654us; 667us; 684us; 686us; 711us; 714us; 715us; 718us; 719us; 721us; 723us; 736us; 753us; 754us; 755us; 768us; 784us; 797us; 799us; 800us; 813us; 815us; 816us; 829us; 831us; 832us; 845us; 847us; 860us; 876us; 877us; 886us; 895us; 901us; 917us; 923us; 929us; 940us; 951us; 953us; 955us; 957us; 959us; 973us; 988us; 1001us; 1018us; 1035us; 1048us; 1061us; 1074us; 1087us; 1100us; 1113us; 1126us; 1139us; 1152us; 1165us; 1178us; 1191us; 1204us; 1217us; 1230us; 1243us; 1244us; 1245us; 1246us; 1247us; 1260us; 1261us; 1262us; 1263us; 1266us; 1267us; 1268us; 1269us; 1270us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 1us; 6us; 6us; 0us; 1us; 1us; 3us; 3us; 0us; 2us; 2us; 2us; 1us; 2us; 2us; 3us; 2us; 2us; 1us; 6us; 7us; 5us; 10us; 4us; 6us; 3us; 4us; 0us; 2us; 6us; 0us; 3us; 7us; 1us; 1us; 1us; 4us; 1us; 3us; 3us; 3us; 4us; 2us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 0us; 1us; 3us; 1us; 3us; 0us; 1us; 1us; 3us; 1us; 1us; 2us; 1us; 2us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 4us; 5us; 6us; 6us; 7us; 7us; 8us; 9us; 9us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 11us; 12us; 12us; 12us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 16us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 16392us; 65535us; 65535us; 16394us; 65535us; 65535us; 16395us; 65535us; 16397us; 65535us; 16398us; 65535us; 16399us; 16400us; 65535us; 16401us; 65535us; 16402us; 65535us; 16403us; 65535us; 16404us; 65535us; 16405us; 16406us; 65535us; 65535us; 65535us; 65535us; 65535us; 16407us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16410us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 65535us; 16419us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16420us; 65535us; 16422us; 65535us; 65535us; 65535us; 65535us; 16424us; 16425us; 65535us; 65535us; 65535us; 65535us; 16427us; 65535us; 65535us; 16428us; 65535us; 65535us; 16429us; 65535us; 65535us; 65535us; 65535us; 16432us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16450us; 16451us; 16452us; 16454us; 65535us; 16456us; 16457us; 16458us; 65535us; 16459us; 16460us; 16461us; 16462us; 16463us; |]
let _fsyacc_reductions ()  =    [| 
# 491 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 500 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "RubbishPar.fsy"
                                                               Prog _1  
                   )
# 38 "RubbishPar.fsy"
                 : Absyn.program));
# 511 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "RubbishPar.fsy"
                                                               [] 
                   )
# 41 "RubbishPar.fsy"
                 : 'Topdecs));
# 521 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "RubbishPar.fsy"
                                                               _1 :: _2 
                   )
# 42 "RubbishPar.fsy"
                 : 'Topdecs));
# 533 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StatExec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "RubbishPar.fsy"
                                                               Main _1 
                   )
# 45 "RubbishPar.fsy"
                 : 'Topdec));
# 544 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "RubbishPar.fsy"
                                                               Fundec(Some(_2), _4, _6) 
                   )
# 50 "RubbishPar.fsy"
                 : 'Fundec));
# 557 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "RubbishPar.fsy"
                                                               Classdec(_2,_4,_6)
                   )
# 54 "RubbishPar.fsy"
                 : 'Classdec));
# 570 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "RubbishPar.fsy"
                                                               [] 
                   )
# 57 "RubbishPar.fsy"
                 : 'Paramdecs));
# 580 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "RubbishPar.fsy"
                                                               _1 
                   )
# 58 "RubbishPar.fsy"
                 : 'Paramdecs));
# 591 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "RubbishPar.fsy"
                                                               [_1]     
                   )
# 62 "RubbishPar.fsy"
                 : 'Paramdecs1));
# 602 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "RubbishPar.fsy"
                                                               _1 :: _3 
                   )
# 63 "RubbishPar.fsy"
                 : 'Paramdecs1));
# 614 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StatExec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "RubbishPar.fsy"
                                                               Block _2 
                   )
# 67 "RubbishPar.fsy"
                 : 'Block));
# 625 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "RubbishPar.fsy"
                                                               [] 
                   )
# 71 "RubbishPar.fsy"
                 : 'StatExec));
# 635 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StatExec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "RubbishPar.fsy"
                                                               Stmt _1 :: _2 
                   )
# 72 "RubbishPar.fsy"
                 : 'StatExec));
# 647 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StatExec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "RubbishPar.fsy"
                                                               _1::_2        
                   )
# 73 "RubbishPar.fsy"
                 : 'StatExec));
# 659 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Classdec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StatExec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "RubbishPar.fsy"
                                                               _1::_2
                   )
# 74 "RubbishPar.fsy"
                 : 'StatExec));
# 671 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "RubbishPar.fsy"
                                                                  ExSemi      
                   )
# 78 "RubbishPar.fsy"
                 : 'Stmt));
# 681 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "RubbishPar.fsy"
                                                                  Expr(_1)    
                   )
# 79 "RubbishPar.fsy"
                 : 'Stmt));
# 692 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "RubbishPar.fsy"
                                                                  Return(None)
                   )
# 80 "RubbishPar.fsy"
                 : 'Stmt));
# 702 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "RubbishPar.fsy"
                                                                  Return(Some(_2))  
                   )
# 81 "RubbishPar.fsy"
                 : 'Stmt));
# 713 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "RubbishPar.fsy"
                                                                  Break       
                   )
# 82 "RubbishPar.fsy"
                 : 'Stmt));
# 723 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "RubbishPar.fsy"
                                                                  Continue    
                   )
# 83 "RubbishPar.fsy"
                 : 'Stmt));
# 733 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "RubbishPar.fsy"
                                                                  _1          
                   )
# 84 "RubbishPar.fsy"
                 : 'Stmt));
# 744 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'IfConJud)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "RubbishPar.fsy"
                                                                  If((Some(_3),_5)::_6)
                   )
# 85 "RubbishPar.fsy"
                 : 'Stmt));
# 757 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'SwConJud)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "RubbishPar.fsy"
                                                                         Switch(_3,_6)
                   )
# 86 "RubbishPar.fsy"
                 : 'Stmt));
# 769 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "RubbishPar.fsy"
                                                                  While(_3,_5) 
                   )
# 87 "RubbishPar.fsy"
                 : 'Stmt));
# 781 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "RubbishPar.fsy"
                                                                            For(_3,_7,_10)
                   )
# 88 "RubbishPar.fsy"
                 : 'Stmt));
# 794 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "RubbishPar.fsy"
                                                                  TryCatchFinal(_2,_4,None) 
                   )
# 89 "RubbishPar.fsy"
                 : 'Stmt));
# 806 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "RubbishPar.fsy"
                                                                  TryCatchFinal(_2,_4,Some(_6))
                   )
# 90 "RubbishPar.fsy"
                 : 'Stmt));
# 819 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "RubbishPar.fsy"
                                                                  Import(_2)
                   )
# 91 "RubbishPar.fsy"
                 : 'Stmt));
# 830 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "RubbishPar.fsy"
                                                                  Lambda(_2,_4)            
                   )
# 92 "RubbishPar.fsy"
                 : 'Stmt));
# 842 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "RubbishPar.fsy"
                                                                  []          
                   )
# 95 "RubbishPar.fsy"
                 : 'IfConJud));
# 852 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "RubbishPar.fsy"
                                                                  [(None,_2)] 
                   )
# 96 "RubbishPar.fsy"
                 : 'IfConJud));
# 863 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'IfConJud)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "RubbishPar.fsy"
                                                                  (Some(_3),_5)::_6 
                   )
# 97 "RubbishPar.fsy"
                 : 'IfConJud));
# 876 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "RubbishPar.fsy"
                                                                  []          
                   )
# 100 "RubbishPar.fsy"
                 : 'SwConJud));
# 886 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "RubbishPar.fsy"
                                                                  [(None,_3)] 
                   )
# 101 "RubbishPar.fsy"
                 : 'SwConJud));
# 897 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'SwConJud)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "RubbishPar.fsy"
                                                                  (Some(_3),_6)::_7 
                   )
# 103 "RubbishPar.fsy"
                 : 'SwConJud));
# 910 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "RubbishPar.fsy"
                                                                  Access _1
                   )
# 106 "RubbishPar.fsy"
                 : 'Expr));
# 921 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "RubbishPar.fsy"
                                                                  _1       
                   )
# 107 "RubbishPar.fsy"
                 : 'Expr));
# 932 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "RubbishPar.fsy"
                                                                  AccVar _1
                   )
# 110 "RubbishPar.fsy"
                 : 'Access));
# 943 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "RubbishPar.fsy"
                                                                  AccIndex(_1,_3)
                   )
# 111 "RubbishPar.fsy"
                 : 'Access));
# 955 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "RubbishPar.fsy"
                                                               _1                  
                   )
# 114 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 966 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "RubbishPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 115 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 978 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'List)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "RubbishPar.fsy"
                                                               Array(_2)           
                   )
# 116 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 989 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'List)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "RubbishPar.fsy"
                                                               Tuple(_2)           
                   )
# 117 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1000 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "RubbishPar.fsy"
                                                               Call(_1, _3)        
                   )
# 118 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1012 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "RubbishPar.fsy"
                                                               Prim1("!", _2)      
                   )
# 119 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1023 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "RubbishPar.fsy"
                                                               Prim1("print", _2) 
                   )
# 120 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1034 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "RubbishPar.fsy"
                                                               Prim1("println", CstI 10) 
                   )
# 121 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1044 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "RubbishPar.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 122 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1056 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "RubbishPar.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 123 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1068 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "RubbishPar.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 124 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1080 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "RubbishPar.fsy"
                                                               Prim2("**", _1, _3) 
                   )
# 125 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1092 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "RubbishPar.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 126 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1104 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "RubbishPar.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 127 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1116 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "RubbishPar.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 128 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1128 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "RubbishPar.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 129 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1140 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "RubbishPar.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 130 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1152 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "RubbishPar.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 131 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1164 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "RubbishPar.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 132 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1176 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "RubbishPar.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 133 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1188 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "RubbishPar.fsy"
                                                               And(_1, _3)     
                   )
# 134 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1200 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "RubbishPar.fsy"
                                                               Or(_1, _3)      
                   )
# 135 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1212 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "RubbishPar.fsy"
                                                               Xor(_1, _3)         
                   )
# 136 "RubbishPar.fsy"
                 : 'ExprNotAccess));
# 1224 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "RubbishPar.fsy"
                                                              []
                   )
# 140 "RubbishPar.fsy"
                 : 'List));
# 1234 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "RubbishPar.fsy"
                                                              [_1]
                   )
# 141 "RubbishPar.fsy"
                 : 'List));
# 1245 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'List)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "RubbishPar.fsy"
                                                              _1::_3
                   )
# 142 "RubbishPar.fsy"
                 : 'List));
# 1257 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "RubbishPar.fsy"
                                                               _1                  
                   )
# 145 "RubbishPar.fsy"
                 : 'AtExprNotAccess));
# 1268 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "RubbishPar.fsy"
                                                               _2                  
                   )
# 146 "RubbishPar.fsy"
                 : 'AtExprNotAccess));
# 1279 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "RubbishPar.fsy"
                                                               []       
                   )
# 149 "RubbishPar.fsy"
                 : 'Exprs));
# 1289 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "RubbishPar.fsy"
                                                               _1       
                   )
# 150 "RubbishPar.fsy"
                 : 'Exprs));
# 1300 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "RubbishPar.fsy"
                                                               [_1]     
                   )
# 154 "RubbishPar.fsy"
                 : 'Exprs1));
# 1311 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "RubbishPar.fsy"
                                                               _1 :: _3 
                   )
# 155 "RubbishPar.fsy"
                 : 'Exprs1));
# 1323 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "RubbishPar.fsy"
                                                               CstI _1       
                   )
# 159 "RubbishPar.fsy"
                 : 'Const));
# 1334 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "RubbishPar.fsy"
                                                               CstB _1       
                   )
# 160 "RubbishPar.fsy"
                 : 'Const));
# 1345 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "RubbishPar.fsy"
                                                               CstI -_2      
                   )
# 161 "RubbishPar.fsy"
                 : 'Const));
# 1356 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "RubbishPar.fsy"
                                                               CstF _1       
                   )
# 162 "RubbishPar.fsy"
                 : 'Const));
# 1367 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "RubbishPar.fsy"
                                                               CstF -_2      
                   )
# 163 "RubbishPar.fsy"
                 : 'Const));
# 1378 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "RubbishPar.fsy"
                                                               CstS _1       
                   )
# 164 "RubbishPar.fsy"
                 : 'Const));
# 1389 "RubbishPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "RubbishPar.fsy"
                                                               Null       
                   )
# 165 "RubbishPar.fsy"
                 : 'Const));
|]
# 1400 "RubbishPar.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 58;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
