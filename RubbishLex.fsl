{
(* File RubbishLex.fsl
   Lexer specification for the simple expression language.
   Author K_HOLMES && Dr.DING
*)
#indent "off"
module RubbishLex

open Microsoft.FSharp.Text.Lexing
open RubbishPar

let lexemeAsString lexbuf = 
    LexBuffer<char>.LexemeString lexbuf


let keyword s =
    match s with
    | "if"      -> IF
    | "else"    -> ELSE
    | "elif"    -> ELIF	
    | "switch"  -> SWITCH
    | "case"    -> CASE
    | "while"   -> WHILE
    | "for"     -> FOR
    | "break"   -> BREAK
    | "continue"-> CONTINUE
    | "def"     -> DEF
    | "null"    -> NULL
    | "import"  -> IMPORT
    | "return"  -> RETURN
    | "and"     -> SEQAND
    | "or"      -> SEQOR
    | "not"     -> NOT
    | "xor"     -> SEQXOR
    | "print" -> PRINT
    | "println" -> PRINTLN
    | "try"     -> TRY
    | "catch" -> CATCH
    | "finally" -> FINALLY
    | "range"   -> RANGE
    | "default" -> DEFAULT
    | "true"    -> CSTBOOL 1
    | "false" -> CSTBOOL 0 
    | "in"     -> IN
    | "lambda"  -> LAMBDA
    | "class"   -> CLASS
    | _         -> NAME s


let cEscape s = 
    match s with 
    | "\\\\" -> '\\'
    | "\\\"" -> '\"'
    | "\\a"  -> '\007'
    | "\\b"  -> '\008'
    | "\\t"  -> '\t'
    | "\\n"  -> '\n'
    | "\\v"  -> '\011'
    | "\\f"  -> '\012'
    | "\\r"  -> '\r'
    | _      -> failwith "Lexer error: impossible C escape"
}
rule Token = parse
  | [' ' '\t' '\r'] { Token lexbuf }
  | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Token lexbuf }
  | ['0'-'9']+'.'['0'-'9']+      { CSTFLOAT (System.Double.Parse (lexemeAsString lexbuf)) }
  | ['0'-'9']+      { CSTINT (System.Int32.Parse (lexemeAsString lexbuf)) }
  | ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9''_']*
                    { keyword (lexemeAsString lexbuf) }
  | ';'             { SEMI  }
  | ','             { COMMA }  
  | ':'             { COLON }
  | '+'             { PLUS  } 
  | '-'             { MINUS } 
  | '*'             { TIMES }
  | "**"            { EXPO  }
  | '/'             { DIV   }
  | '%'             { MOD   }
  | '='             { ASSIGN} 
  | ">="            { GE  }
  | "<="            { LE  }
  | "=="            { EQ    }
  | "!="            { NE }
  | '>'             { GT   }
  | '<'             { LT   }
  | '('             { LPAR  } 
  | ')'             { RPAR  } 
  | '['             { LBRACK  }
  | ']'             { RBRACK  }
  | '{'             { LBRACE  }
  | '}'             { RBRACE  }
  | '$'             { EndLineComment lexbuf; Token lexbuf  }
  | "$."            { Comment lexbuf; Token lexbuf }
  | '"'             { CSTSTRING (String [] lexbuf) }
  | eof             { EOF   }
  | _               { failwith "Lexer error: illegal symbol" }

and Comment = parse
   | "$."           { Comment lexbuf; Comment lexbuf }
   | ".$"           { () }
   | '\n'           { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Comment lexbuf }
   | (eof | '\026') { failwith "Lexer error: unterminated comment" }
   | _              { Comment lexbuf }

and EndLineComment = parse
   | '\n'           { lexbuf.EndPos <- lexbuf.EndPos.NextLine }
   | (eof | '\026') { () }
   | _              { EndLineComment lexbuf }
and String chars = parse 
  | '"'
      { Microsoft.FSharp.Core.String.concat "" (List.map string (List.rev chars)) }
  | '\\' ['\\' '"' 'a' 'b' 't' 'n' 'v' 'f' 'r']
      { String (cEscape (lexemeAsString lexbuf) :: chars) lexbuf }
  | "''" 
      { String ('\'' :: chars) lexbuf }
  | '\\'
      { failwith "Lexer error: illegal escape sequence" }
  | (eof | '\026')
      { failwith "Lexer error: unterminated string" }
  | ['\n' '\r']
      { failwith "Lexer error: newline in string" }
  | ['\000'-'\031' '\127' '\255']
      { failwith "Lexer error: invalid character in string" }
  | _
      { String (char (lexbuf.LexemeChar 0) :: chars) lexbuf }
