{
(* File RubbishLex.fsl
   Lexer specification for the simple expression language.
*)

module ExprLex

open Microsoft.FSharp.Text.Lexing
open ExprPar

let lexemeAsString lexbuf = 
    LexBuffer<char>.LexemeString lexbuf

(* Scan keywords as identifiers and use this function to distinguish them. *)
(* If the set of keywords is large, use a hashtable instead.               *)

let keyword s =
    match s with
    | "if"      -> IF
    | "else"    -> ELSE
    | "elif"    -> ELIF
    | "switch"  -> SWITCH
    | "case"    -> CASE
    | "while"   -> WHILE
    | "for"     -> FOR
    | "break"   -> BREAK
    | "continue"-> CONTINUE
    | "struct"  -> STRUCT
    | "def"     -> DEF
    | "import"  -> IMPORT
    | "return"  -> RETURN
    | _         -> NAME s
}

rule Token = parse
  | [' ' '\t' '\r'] { Token lexbuf }
  | '\n'            { lexbuf.EndPos <- lexbuf.EndPos.NextLine; Token lexbuf }
  | ['0'-'9']+      { CSTINT (System.Int32.Parse (lexemeAsString lexbuf)) }
  | ['a'-'z''A'-'Z']['a'-'z''A'-'Z''0'-'9''_']*
  | ';'             { SEMI  }
  | ':'             { COLON }
  | '+'             { PLUS  } 
  | '-'             { MINUS } 
  | '*'             { TIMES }
  | '/'             { DIV   }
  | '='             { EQ    } 
  | '('             { LPAR  } 
  | ')'             { RPAR  } 
  | '['             { LSQU  }
  | ']'             { RSQU  }
  | '{'             { LCUR  }
  | '}'             { RCUR  }
  | '$'             { NOTE  } 
  | eof             { EOF   }
  | _               { failwith "Lexer error: illegal symbol" }