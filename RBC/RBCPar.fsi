// Signature file for parser generated by fsyacc
module RBCPar
type token = 
  | EOF
  | FLOAT_LIT of (float)
  | INT_LIT of (int)
  | TRUE
  | FALSE
  | IDENT of (string)
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | OR
  | AND
  | NOT
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | DOT
  | VOID
  | INT
  | FLOAT
  | BOOL
  | BREAK
  | WHILE
  | IF
  | NEW
  | ELSE
  | RETURN
  | SIZE
type tokenId = 
    | TOKEN_EOF
    | TOKEN_FLOAT_LIT
    | TOKEN_INT_LIT
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_IDENT
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_NOT
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_DOT
    | TOKEN_VOID
    | TOKEN_INT
    | TOKEN_FLOAT
    | TOKEN_BOOL
    | TOKEN_BREAK
    | TOKEN_WHILE
    | TOKEN_IF
    | TOKEN_NEW
    | TOKEN_ELSE
    | TOKEN_RETURN
    | TOKEN_SIZE
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Program
    | NONTERM_Decl_list
    | NONTERM_Decl
    | NONTERM_Var_decl
    | NONTERM_Type_spec
    | NONTERM_Fun_decl
    | NONTERM_Params
    | NONTERM_Params_list
    | NONTERM_Param
    | NONTERM_Compound_stmt
    | NONTERM_Local_decls
    | NONTERM_Local_decl
    | NONTERM_Stmt_list
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_StmtU
    | NONTERM_Expr_stmt
    | NONTERM_Return_stmt
    | NONTERM_Expr
    | NONTERM_Arg_list
    | NONTERM_Args
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val Main : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (MiniC.Compiler.Ast.Program) 
