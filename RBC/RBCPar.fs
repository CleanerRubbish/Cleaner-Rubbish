// Implementation file for parser generated by fsyacc
module RBCPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "RBCPar.fsy"


open RBC.AbstractTree

// Vardesc 返回的是一个 元组 (g,s)
// g是类型构造函数，s是变量名

# 14 "RBCPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | FLOAT_LIT of (float)
  | INT_LIT of (int)
  | TRUE
  | FALSE
  | IDENT of (string)
  | CHAR_LIT of (string)
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | OR
  | AND
  | NOT
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | DOT
  | VOID
  | INT
  | FLOAT
  | BOOL
  | CHAR
  | BREAK
  | WHILE
  | IF
  | NEW
  | ELSE
  | RETURN
  | SIZE
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_FLOAT_LIT
    | TOKEN_INT_LIT
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_IDENT
    | TOKEN_CHAR_LIT
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_NOT
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_DOT
    | TOKEN_VOID
    | TOKEN_INT
    | TOKEN_FLOAT
    | TOKEN_BOOL
    | TOKEN_CHAR
    | TOKEN_BREAK
    | TOKEN_WHILE
    | TOKEN_IF
    | TOKEN_NEW
    | TOKEN_ELSE
    | TOKEN_RETURN
    | TOKEN_SIZE
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Program
    | NONTERM_Decl_list
    | NONTERM_Decl
    | NONTERM_Var_decl
    | NONTERM_Type_spec
    | NONTERM_Fun_decl
    | NONTERM_Params
    | NONTERM_Params_list
    | NONTERM_Param
    | NONTERM_Compound_stmt
    | NONTERM_Local_decls
    | NONTERM_Local_decl
    | NONTERM_Stmt_list
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_StmtU
    | NONTERM_Expr_stmt
    | NONTERM_Return_stmt
    | NONTERM_Expr
    | NONTERM_Arg_list
    | NONTERM_Args

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | FLOAT_LIT _ -> 1 
  | INT_LIT _ -> 2 
  | TRUE  -> 3 
  | FALSE  -> 4 
  | IDENT _ -> 5 
  | CHAR_LIT _ -> 6 
  | EQ  -> 7 
  | NE  -> 8 
  | GT  -> 9 
  | LT  -> 10 
  | GE  -> 11 
  | LE  -> 12 
  | PLUS  -> 13 
  | MINUS  -> 14 
  | TIMES  -> 15 
  | DIV  -> 16 
  | MOD  -> 17 
  | OR  -> 18 
  | AND  -> 19 
  | NOT  -> 20 
  | LPAR  -> 21 
  | RPAR  -> 22 
  | LBRACE  -> 23 
  | RBRACE  -> 24 
  | LBRACK  -> 25 
  | RBRACK  -> 26 
  | SEMI  -> 27 
  | COMMA  -> 28 
  | ASSIGN  -> 29 
  | DOT  -> 30 
  | VOID  -> 31 
  | INT  -> 32 
  | FLOAT  -> 33 
  | BOOL  -> 34 
  | CHAR  -> 35 
  | BREAK  -> 36 
  | WHILE  -> 37 
  | IF  -> 38 
  | NEW  -> 39 
  | ELSE  -> 40 
  | RETURN  -> 41 
  | SIZE  -> 42 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_FLOAT_LIT 
  | 2 -> TOKEN_INT_LIT 
  | 3 -> TOKEN_TRUE 
  | 4 -> TOKEN_FALSE 
  | 5 -> TOKEN_IDENT 
  | 6 -> TOKEN_CHAR_LIT 
  | 7 -> TOKEN_EQ 
  | 8 -> TOKEN_NE 
  | 9 -> TOKEN_GT 
  | 10 -> TOKEN_LT 
  | 11 -> TOKEN_GE 
  | 12 -> TOKEN_LE 
  | 13 -> TOKEN_PLUS 
  | 14 -> TOKEN_MINUS 
  | 15 -> TOKEN_TIMES 
  | 16 -> TOKEN_DIV 
  | 17 -> TOKEN_MOD 
  | 18 -> TOKEN_OR 
  | 19 -> TOKEN_AND 
  | 20 -> TOKEN_NOT 
  | 21 -> TOKEN_LPAR 
  | 22 -> TOKEN_RPAR 
  | 23 -> TOKEN_LBRACE 
  | 24 -> TOKEN_RBRACE 
  | 25 -> TOKEN_LBRACK 
  | 26 -> TOKEN_RBRACK 
  | 27 -> TOKEN_SEMI 
  | 28 -> TOKEN_COMMA 
  | 29 -> TOKEN_ASSIGN 
  | 30 -> TOKEN_DOT 
  | 31 -> TOKEN_VOID 
  | 32 -> TOKEN_INT 
  | 33 -> TOKEN_FLOAT 
  | 34 -> TOKEN_BOOL 
  | 35 -> TOKEN_CHAR 
  | 36 -> TOKEN_BREAK 
  | 37 -> TOKEN_WHILE 
  | 38 -> TOKEN_IF 
  | 39 -> TOKEN_NEW 
  | 40 -> TOKEN_ELSE 
  | 41 -> TOKEN_RETURN 
  | 42 -> TOKEN_SIZE 
  | 45 -> TOKEN_end_of_input
  | 43 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Program 
    | 3 -> NONTERM_Decl_list 
    | 4 -> NONTERM_Decl_list 
    | 5 -> NONTERM_Decl 
    | 6 -> NONTERM_Decl 
    | 7 -> NONTERM_Var_decl 
    | 8 -> NONTERM_Var_decl 
    | 9 -> NONTERM_Type_spec 
    | 10 -> NONTERM_Type_spec 
    | 11 -> NONTERM_Type_spec 
    | 12 -> NONTERM_Type_spec 
    | 13 -> NONTERM_Type_spec 
    | 14 -> NONTERM_Fun_decl 
    | 15 -> NONTERM_Params 
    | 16 -> NONTERM_Params 
    | 17 -> NONTERM_Params_list 
    | 18 -> NONTERM_Params_list 
    | 19 -> NONTERM_Param 
    | 20 -> NONTERM_Param 
    | 21 -> NONTERM_Compound_stmt 
    | 22 -> NONTERM_Local_decls 
    | 23 -> NONTERM_Local_decls 
    | 24 -> NONTERM_Local_decl 
    | 25 -> NONTERM_Local_decl 
    | 26 -> NONTERM_Stmt_list 
    | 27 -> NONTERM_Stmt_list 
    | 28 -> NONTERM_Stmt 
    | 29 -> NONTERM_Stmt 
    | 30 -> NONTERM_StmtM 
    | 31 -> NONTERM_StmtM 
    | 32 -> NONTERM_StmtM 
    | 33 -> NONTERM_StmtM 
    | 34 -> NONTERM_StmtM 
    | 35 -> NONTERM_StmtM 
    | 36 -> NONTERM_StmtU 
    | 37 -> NONTERM_StmtU 
    | 38 -> NONTERM_StmtU 
    | 39 -> NONTERM_Expr_stmt 
    | 40 -> NONTERM_Expr_stmt 
    | 41 -> NONTERM_Return_stmt 
    | 42 -> NONTERM_Return_stmt 
    | 43 -> NONTERM_Expr 
    | 44 -> NONTERM_Expr 
    | 45 -> NONTERM_Expr 
    | 46 -> NONTERM_Expr 
    | 47 -> NONTERM_Expr 
    | 48 -> NONTERM_Expr 
    | 49 -> NONTERM_Expr 
    | 50 -> NONTERM_Expr 
    | 51 -> NONTERM_Expr 
    | 52 -> NONTERM_Expr 
    | 53 -> NONTERM_Expr 
    | 54 -> NONTERM_Expr 
    | 55 -> NONTERM_Expr 
    | 56 -> NONTERM_Expr 
    | 57 -> NONTERM_Expr 
    | 58 -> NONTERM_Expr 
    | 59 -> NONTERM_Expr 
    | 60 -> NONTERM_Expr 
    | 61 -> NONTERM_Expr 
    | 62 -> NONTERM_Expr 
    | 63 -> NONTERM_Expr 
    | 64 -> NONTERM_Expr 
    | 65 -> NONTERM_Expr 
    | 66 -> NONTERM_Expr 
    | 67 -> NONTERM_Expr 
    | 68 -> NONTERM_Expr 
    | 69 -> NONTERM_Expr 
    | 70 -> NONTERM_Expr 
    | 71 -> NONTERM_Expr 
    | 72 -> NONTERM_Arg_list 
    | 73 -> NONTERM_Arg_list 
    | 74 -> NONTERM_Args 
    | 75 -> NONTERM_Args 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 45 
let _fsyacc_tagOfErrorTerminal = 43

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | FLOAT_LIT _ -> "FLOAT_LIT" 
  | INT_LIT _ -> "INT_LIT" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | IDENT _ -> "IDENT" 
  | CHAR_LIT _ -> "CHAR_LIT" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | OR  -> "OR" 
  | AND  -> "AND" 
  | NOT  -> "NOT" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | DOT  -> "DOT" 
  | VOID  -> "VOID" 
  | INT  -> "INT" 
  | FLOAT  -> "FLOAT" 
  | BOOL  -> "BOOL" 
  | CHAR  -> "CHAR" 
  | BREAK  -> "BREAK" 
  | WHILE  -> "WHILE" 
  | IF  -> "IF" 
  | NEW  -> "NEW" 
  | ELSE  -> "ELSE" 
  | RETURN  -> "RETURN" 
  | SIZE  -> "SIZE" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | FLOAT_LIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT_LIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHAR_LIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | FLOAT  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | NEW  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | SIZE  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 4us; 5us; 6us; 2us; 65535us; 0us; 5us; 5us; 5us; 2us; 65535us; 0us; 7us; 5us; 7us; 7us; 65535us; 0us; 9us; 5us; 9us; 21us; 29us; 27us; 29us; 33us; 39us; 37us; 39us; 131us; 132us; 2us; 65535us; 0us; 8us; 5us; 8us; 1us; 65535us; 21us; 22us; 2us; 65535us; 21us; 25us; 27us; 28us; 2us; 65535us; 21us; 26us; 27us; 26us; 6us; 65535us; 23us; 24us; 34us; 52us; 45us; 52us; 56us; 52us; 57us; 52us; 62us; 52us; 2us; 65535us; 33us; 34us; 37us; 38us; 2us; 65535us; 33us; 37us; 37us; 37us; 2us; 65535us; 34us; 35us; 45us; 46us; 4us; 65535us; 34us; 45us; 45us; 45us; 56us; 68us; 62us; 63us; 5us; 65535us; 34us; 47us; 45us; 47us; 56us; 48us; 57us; 58us; 62us; 47us; 5us; 65535us; 34us; 49us; 45us; 49us; 56us; 49us; 57us; 67us; 62us; 50us; 5us; 65535us; 34us; 51us; 45us; 51us; 56us; 51us; 57us; 51us; 62us; 51us; 5us; 65535us; 34us; 64us; 45us; 64us; 56us; 64us; 57us; 64us; 62us; 64us; 31us; 65535us; 34us; 69us; 45us; 69us; 54us; 55us; 56us; 69us; 57us; 69us; 60us; 61us; 62us; 69us; 72us; 74us; 77us; 78us; 79us; 80us; 82us; 83us; 103us; 84us; 104us; 85us; 105us; 86us; 106us; 87us; 107us; 88us; 108us; 89us; 109us; 90us; 110us; 91us; 111us; 92us; 112us; 93us; 113us; 94us; 114us; 95us; 115us; 96us; 116us; 97us; 117us; 98us; 118us; 99us; 119us; 100us; 121us; 102us; 133us; 101us; 135us; 102us; 2us; 65535us; 121us; 137us; 135us; 136us; 1us; 65535us; 121us; 122us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 11us; 14us; 22us; 25us; 27us; 30us; 33us; 40us; 43us; 46us; 49us; 54us; 60us; 66us; 72us; 78us; 110us; 113us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 3us; 7us; 8us; 14us; 3us; 7us; 8us; 14us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 2us; 9us; 16us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 15us; 2us; 17us; 18us; 1us; 17us; 1us; 17us; 2us; 19us; 20us; 2us; 19us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 23us; 1us; 23us; 2us; 24us; 25us; 2us; 24us; 25us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 27us; 1us; 27us; 1us; 28us; 3us; 28us; 32us; 36us; 1us; 29us; 2us; 29us; 38us; 1us; 30us; 1us; 31us; 3us; 32us; 36us; 37us; 3us; 32us; 36us; 37us; 16us; 32us; 36us; 37us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 3us; 32us; 36us; 37us; 2us; 32us; 36us; 1us; 32us; 2us; 33us; 38us; 2us; 33us; 38us; 15us; 33us; 38us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 2us; 33us; 38us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 37us; 14us; 39us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 1us; 39us; 1us; 40us; 2us; 41us; 42us; 1us; 41us; 14us; 42us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 1us; 42us; 6us; 43us; 44us; 62us; 63us; 64us; 65us; 1us; 43us; 14us; 43us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 2us; 44us; 63us; 15us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 63us; 2us; 44us; 63us; 1us; 44us; 14us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 58us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 59us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 60us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 61us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 71us; 15us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 72us; 73us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 61us; 1us; 64us; 1us; 64us; 1us; 64us; 1us; 65us; 1us; 65us; 1us; 66us; 1us; 67us; 1us; 68us; 1us; 69us; 1us; 70us; 1us; 71us; 1us; 71us; 1us; 71us; 1us; 71us; 1us; 72us; 1us; 72us; 1us; 74us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 22us; 26us; 28us; 30us; 32us; 34us; 36us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 60us; 62us; 64us; 67us; 70us; 72us; 74us; 76us; 78us; 80us; 82us; 84us; 86us; 89us; 92us; 94us; 96us; 98us; 100us; 102us; 104us; 106us; 110us; 112us; 115us; 117us; 119us; 123us; 127us; 144us; 148us; 151us; 153us; 156us; 159us; 175us; 178us; 180us; 182us; 184us; 186us; 188us; 190us; 205us; 207us; 209us; 212us; 214us; 229us; 231us; 238us; 240us; 255us; 258us; 274us; 277us; 279us; 294us; 309us; 324us; 339us; 354us; 369us; 384us; 399us; 414us; 429us; 444us; 459us; 474us; 489us; 504us; 519us; 534us; 549us; 564us; 580us; 582us; 584us; 586us; 588us; 590us; 592us; 594us; 596us; 598us; 600us; 602us; 604us; 606us; 608us; 610us; 612us; 614us; 616us; 618us; 620us; 622us; 624us; 626us; 628us; 630us; 632us; 634us; 636us; 638us; 640us; 642us; 644us; 646us; 648us; |]
let _fsyacc_action_rows = 138
let _fsyacc_actionTableElements = [|5us; 16387us; 31us; 15us; 32us; 18us; 33us; 19us; 34us; 17us; 35us; 20us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 0us; 16386us; 5us; 16387us; 31us; 15us; 32us; 18us; 33us; 19us; 34us; 17us; 35us; 20us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 1us; 32768us; 5us; 10us; 3us; 32768us; 21us; 21us; 25us; 12us; 27us; 11us; 0us; 16391us; 1us; 32768us; 26us; 13us; 1us; 32768us; 27us; 14us; 0us; 16392us; 0us; 16393us; 1us; 16393us; 22us; 16400us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 5us; 32768us; 31us; 16us; 32us; 18us; 33us; 19us; 34us; 17us; 35us; 20us; 1us; 32768us; 22us; 23us; 1us; 32768us; 23us; 33us; 0us; 16398us; 0us; 16399us; 1us; 16402us; 28us; 27us; 5us; 32768us; 31us; 15us; 32us; 18us; 33us; 19us; 34us; 17us; 35us; 20us; 0us; 16401us; 1us; 32768us; 5us; 30us; 1us; 16403us; 25us; 31us; 1us; 32768us; 26us; 32us; 0us; 16404us; 5us; 16406us; 31us; 15us; 32us; 18us; 33us; 19us; 34us; 17us; 35us; 20us; 17us; 16410us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 23us; 33us; 27us; 71us; 36us; 65us; 37us; 59us; 38us; 53us; 39us; 131us; 41us; 72us; 1us; 32768us; 24us; 36us; 0us; 16405us; 5us; 16406us; 31us; 15us; 32us; 18us; 33us; 19us; 34us; 17us; 35us; 20us; 0us; 16407us; 1us; 32768us; 5us; 40us; 2us; 32768us; 25us; 42us; 27us; 41us; 0us; 16408us; 1us; 32768us; 26us; 43us; 1us; 32768us; 27us; 44us; 0us; 16409us; 17us; 16410us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 23us; 33us; 27us; 71us; 36us; 65us; 37us; 59us; 38us; 53us; 39us; 131us; 41us; 72us; 0us; 16411us; 0us; 16412us; 1us; 16412us; 40us; 57us; 0us; 16413us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 1us; 32768us; 21us; 54us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 14us; 32768us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 22us; 56us; 17us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 23us; 33us; 27us; 71us; 36us; 65us; 37us; 59us; 38us; 53us; 39us; 131us; 41us; 72us; 17us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 23us; 33us; 27us; 71us; 36us; 65us; 37us; 59us; 38us; 53us; 39us; 131us; 41us; 72us; 0us; 16416us; 1us; 32768us; 21us; 60us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 14us; 32768us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 22us; 62us; 17us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 23us; 33us; 27us; 71us; 36us; 65us; 37us; 59us; 38us; 53us; 39us; 131us; 41us; 72us; 0us; 16417us; 0us; 16418us; 1us; 32768us; 27us; 66us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 14us; 32768us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 27us; 70us; 0us; 16423us; 0us; 16424us; 12us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 27us; 73us; 39us; 131us; 0us; 16425us; 14us; 32768us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 27us; 75us; 0us; 16426us; 4us; 16446us; 21us; 121us; 25us; 79us; 29us; 77us; 30us; 124us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 13us; 16427us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 14us; 32768us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 26us; 81us; 1us; 16447us; 29us; 82us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 13us; 16428us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 13us; 16429us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 13us; 16430us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 13us; 16431us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 13us; 16432us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 13us; 16433us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 13us; 16434us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 13us; 16435us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 13us; 16436us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 13us; 16437us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 13us; 16438us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 13us; 16439us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 13us; 16440us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 13us; 16441us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 13us; 16442us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 13us; 16443us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 13us; 16444us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 14us; 32768us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 22us; 120us; 14us; 32768us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 26us; 134us; 14us; 16457us; 7us; 105us; 8us; 106us; 9us; 110us; 10us; 109us; 11us; 108us; 12us; 107us; 13us; 111us; 14us; 112us; 15us; 113us; 16us; 114us; 17us; 115us; 18us; 103us; 19us; 104us; 28us; 135us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 0us; 16445us; 11us; 16459us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 1us; 32768us; 22us; 123us; 0us; 16448us; 1us; 32768us; 42us; 125us; 0us; 16449us; 0us; 16450us; 0us; 16451us; 0us; 16452us; 0us; 16453us; 0us; 16454us; 5us; 32768us; 31us; 15us; 32us; 18us; 33us; 19us; 34us; 17us; 35us; 20us; 1us; 32768us; 25us; 133us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 0us; 16455us; 11us; 32768us; 1us; 129us; 2us; 128us; 3us; 126us; 4us; 127us; 5us; 76us; 6us; 130us; 13us; 118us; 14us; 117us; 20us; 116us; 21us; 119us; 39us; 131us; 0us; 16456us; 0us; 16458us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 6us; 7us; 9us; 10us; 11us; 17us; 18us; 19us; 20us; 22us; 26us; 27us; 29us; 31us; 32us; 33us; 35us; 36us; 37us; 38us; 39us; 45us; 47us; 49us; 50us; 51us; 53us; 59us; 60us; 62us; 64us; 66us; 67us; 73us; 91us; 93us; 94us; 100us; 101us; 103us; 106us; 107us; 109us; 111us; 112us; 130us; 131us; 132us; 134us; 135us; 136us; 137us; 138us; 140us; 152us; 167us; 185us; 203us; 204us; 206us; 218us; 233us; 251us; 252us; 253us; 255us; 256us; 257us; 258us; 273us; 274us; 275us; 288us; 289us; 304us; 305us; 310us; 322us; 336us; 348us; 363us; 365us; 377us; 391us; 405us; 419us; 433us; 447us; 461us; 475us; 489us; 503us; 517us; 531us; 545us; 559us; 573us; 587us; 601us; 615us; 630us; 645us; 660us; 672us; 684us; 696us; 708us; 720us; 732us; 744us; 756us; 768us; 780us; 792us; 804us; 816us; 828us; 840us; 852us; 864us; 865us; 877us; 879us; 880us; 882us; 883us; 884us; 885us; 886us; 887us; 888us; 894us; 896us; 908us; 909us; 921us; 922us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 0us; 2us; 1us; 1us; 3us; 5us; 1us; 1us; 1us; 1us; 1us; 6us; 1us; 1us; 3us; 1us; 2us; 4us; 4us; 0us; 2us; 3us; 5us; 0us; 2us; 1us; 1us; 1us; 1us; 7us; 5us; 1us; 2us; 7us; 5us; 5us; 2us; 1us; 2us; 3us; 3us; 6us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 2us; 3us; 1us; 4us; 4us; 3us; 1us; 1us; 1us; 1us; 1us; 5us; 3us; 1us; 1us; 0us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 6us; 6us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 16us; 16us; 16us; 16us; 16us; 17us; 17us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 21us; 21us; 22us; 22us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 16388us; 16389us; 16390us; 65535us; 65535us; 16391us; 65535us; 65535us; 16392us; 16393us; 65535us; 16394us; 16395us; 16396us; 16397us; 65535us; 65535us; 65535us; 16398us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 16405us; 65535us; 16407us; 65535us; 65535us; 16408us; 65535us; 65535us; 16409us; 65535us; 16411us; 16412us; 65535us; 16413us; 65535us; 16414us; 16415us; 65535us; 65535us; 65535us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 65535us; 16417us; 16418us; 65535us; 16419us; 16420us; 16421us; 65535us; 16423us; 16424us; 65535us; 16425us; 65535us; 16426us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16445us; 65535us; 65535us; 16448us; 65535us; 16449us; 16450us; 16451us; 16452us; 16453us; 16454us; 65535us; 65535us; 65535us; 16455us; 65535us; 16456us; 16458us; |]
let _fsyacc_reductions ()  =    [| 
# 418 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : RBC.AbstractTree.Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 427 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "RBCPar.fsy"
                                                            _1 
                   )
# 24 "RBCPar.fsy"
                 : RBC.AbstractTree.Program));
# 438 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decl_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "RBCPar.fsy"
                                                            _1 
                   )
# 28 "RBCPar.fsy"
                 : 'Program));
# 449 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "RBCPar.fsy"
                                                            [] 
                   )
# 32 "RBCPar.fsy"
                 : 'Decl_list));
# 459 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decl)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decl_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "RBCPar.fsy"
                                                            _1 :: _2 
                   )
# 33 "RBCPar.fsy"
                 : 'Decl_list));
# 471 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Var_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "RBCPar.fsy"
                                                            StaticVariableDeclaration(_1) 
                   )
# 37 "RBCPar.fsy"
                 : 'Decl));
# 482 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fun_decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "RBCPar.fsy"
                                                            _1 
                   )
# 38 "RBCPar.fsy"
                 : 'Decl));
# 493 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_spec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "RBCPar.fsy"
                                                           ScalarVariableDeclaration(_1,_2)   
                   )
# 42 "RBCPar.fsy"
                 : 'Var_decl));
# 505 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_spec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "RBCPar.fsy"
                                                               ArrayVariableDeclaration(_1,_2)    
                   )
# 43 "RBCPar.fsy"
                 : 'Var_decl));
# 517 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "RBCPar.fsy"
                                                           Void
                   )
# 46 "RBCPar.fsy"
                 : 'Type_spec));
# 527 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "RBCPar.fsy"
                                                           Bool
                   )
# 47 "RBCPar.fsy"
                 : 'Type_spec));
# 537 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "RBCPar.fsy"
                                                           Int
                   )
# 48 "RBCPar.fsy"
                 : 'Type_spec));
# 547 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "RBCPar.fsy"
                                                           Float
                   )
# 49 "RBCPar.fsy"
                 : 'Type_spec));
# 557 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "RBCPar.fsy"
                                                           Char
                   )
# 50 "RBCPar.fsy"
                 : 'Type_spec));
# 567 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_spec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Compound_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "RBCPar.fsy"
                                                                         FunctionDeclaration(_1,_2,_4,_6)
                   )
# 52 "RBCPar.fsy"
                 : 'Fun_decl));
# 581 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "RBCPar.fsy"
                                                           _1
                   )
# 55 "RBCPar.fsy"
                 : 'Params));
# 592 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "RBCPar.fsy"
                                                           []
                   )
# 56 "RBCPar.fsy"
                 : 'Params));
# 602 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Param)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "RBCPar.fsy"
                                                           _1::_3
                   )
# 59 "RBCPar.fsy"
                 : 'Params_list));
# 614 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Param)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "RBCPar.fsy"
                                                           [_1]
                   )
# 60 "RBCPar.fsy"
                 : 'Params_list));
# 625 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_spec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "RBCPar.fsy"
                                                           ScalarVariableDeclaration(_1,_2)
                   )
# 63 "RBCPar.fsy"
                 : 'Param));
# 637 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_spec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "RBCPar.fsy"
                                                           ArrayVariableDeclaration(_1,_2)
                   )
# 64 "RBCPar.fsy"
                 : 'Param));
# 649 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Local_decls)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "RBCPar.fsy"
                                                              (_2,_3)
                   )
# 67 "RBCPar.fsy"
                 : 'Compound_stmt));
# 661 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "RBCPar.fsy"
                                                           []
                   )
# 70 "RBCPar.fsy"
                 : 'Local_decls));
# 671 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Local_decl)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Local_decls)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "RBCPar.fsy"
                                                           _1::_2
                   )
# 71 "RBCPar.fsy"
                 : 'Local_decls));
# 683 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_spec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "RBCPar.fsy"
                                                           ScalarVariableDeclaration(_1,_2)
                   )
# 74 "RBCPar.fsy"
                 : 'Local_decl));
# 695 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_spec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "RBCPar.fsy"
                                                             ArrayVariableDeclaration(_1,_2)
                   )
# 75 "RBCPar.fsy"
                 : 'Local_decl));
# 707 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "RBCPar.fsy"
                                                           []
                   )
# 78 "RBCPar.fsy"
                 : 'Stmt_list));
# 717 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "RBCPar.fsy"
                                                           _1::_2
                   )
# 79 "RBCPar.fsy"
                 : 'Stmt_list));
# 729 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "RBCPar.fsy"
                                                               _1 
                   )
# 82 "RBCPar.fsy"
                 : 'Stmt));
# 740 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "RBCPar.fsy"
                                                               _1 
                   )
# 83 "RBCPar.fsy"
                 : 'Stmt));
# 751 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "RBCPar.fsy"
                                                           ExpressionStatement(_1)
                   )
# 88 "RBCPar.fsy"
                 : 'StmtM));
# 762 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Compound_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "RBCPar.fsy"
                                                           CompoundStatement(_1)
                   )
# 89 "RBCPar.fsy"
                 : 'StmtM));
# 773 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "RBCPar.fsy"
                                                             IfStatement(_3,_5,Some(_7))
                   )
# 90 "RBCPar.fsy"
                 : 'StmtM));
# 786 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "RBCPar.fsy"
                                                           WhileStatement(_3,_5)
                   )
# 91 "RBCPar.fsy"
                 : 'StmtM));
# 798 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Return_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "RBCPar.fsy"
                                                           _1
                   )
# 92 "RBCPar.fsy"
                 : 'StmtM));
# 809 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "RBCPar.fsy"
                                                           BreakStatement
                   )
# 93 "RBCPar.fsy"
                 : 'StmtM));
# 819 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "RBCPar.fsy"
                                                               IfStatement(_3, _5, Some(_7))
                   )
# 96 "RBCPar.fsy"
                 : 'StmtU));
# 832 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "RBCPar.fsy"
                                                               IfStatement(_3, _5, None) 
                   )
# 97 "RBCPar.fsy"
                 : 'StmtU));
# 844 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "RBCPar.fsy"
                                                               WhileStatement(_3, _5)    
                   )
# 98 "RBCPar.fsy"
                 : 'StmtU));
# 856 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "RBCPar.fsy"
                                                           Expression(_1)
                   )
# 102 "RBCPar.fsy"
                 : 'Expr_stmt));
# 867 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "RBCPar.fsy"
                                                           Nop
                   )
# 103 "RBCPar.fsy"
                 : 'Expr_stmt));
# 877 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "RBCPar.fsy"
                                                           ReturnStatement(None)
                   )
# 106 "RBCPar.fsy"
                 : 'Return_stmt));
# 887 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "RBCPar.fsy"
                                                           ReturnStatement(Some(_2))
                   )
# 107 "RBCPar.fsy"
                 : 'Return_stmt));
# 898 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "RBCPar.fsy"
                                                           ScalarAssignmentExpression({Identifier = _1;},_3)
                   )
# 110 "RBCPar.fsy"
                 : 'Expr));
# 910 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "RBCPar.fsy"
                                                               ArrayAssignmentExpression({Identifier = _1;},_3,_6)
                   )
# 111 "RBCPar.fsy"
                 : 'Expr));
# 923 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "RBCPar.fsy"
                                                           BinaryExpression(_1,ConditionalOr,_3)
                   )
# 112 "RBCPar.fsy"
                 : 'Expr));
# 935 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "RBCPar.fsy"
                                                           BinaryExpression(_1,ConditionalAnd,_3)
                   )
# 113 "RBCPar.fsy"
                 : 'Expr));
# 947 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "RBCPar.fsy"
                                                           BinaryExpression(_1,Equal,_3)
                   )
# 114 "RBCPar.fsy"
                 : 'Expr));
# 959 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "RBCPar.fsy"
                                                           BinaryExpression(_1,NotEqual,_3)
                   )
# 115 "RBCPar.fsy"
                 : 'Expr));
# 971 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "RBCPar.fsy"
                                                           BinaryExpression(_1,LessEqual,_3)
                   )
# 116 "RBCPar.fsy"
                 : 'Expr));
# 983 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "RBCPar.fsy"
                                                           BinaryExpression(_1,GreaterEqual,_3)
                   )
# 117 "RBCPar.fsy"
                 : 'Expr));
# 995 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "RBCPar.fsy"
                                                           BinaryExpression(_1,Less,_3)
                   )
# 118 "RBCPar.fsy"
                 : 'Expr));
# 1007 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "RBCPar.fsy"
                                                           BinaryExpression(_1,Greater,_3)
                   )
# 119 "RBCPar.fsy"
                 : 'Expr));
# 1019 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "RBCPar.fsy"
                                                           BinaryExpression(_1,Add,_3)
                   )
# 120 "RBCPar.fsy"
                 : 'Expr));
# 1031 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "RBCPar.fsy"
                                                           BinaryExpression(_1,Subtract,_3)
                   )
# 121 "RBCPar.fsy"
                 : 'Expr));
# 1043 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "RBCPar.fsy"
                                                           BinaryExpression(_1,Multiply,_3)
                   )
# 122 "RBCPar.fsy"
                 : 'Expr));
# 1055 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "RBCPar.fsy"
                                                           BinaryExpression(_1,Divide,_3)
                   )
# 123 "RBCPar.fsy"
                 : 'Expr));
# 1067 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "RBCPar.fsy"
                                                           BinaryExpression(_1,Modulus,_3)
                   )
# 124 "RBCPar.fsy"
                 : 'Expr));
# 1079 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "RBCPar.fsy"
                                                           UnaryExpression(LogicalNegate,_2)
                   )
# 125 "RBCPar.fsy"
                 : 'Expr));
# 1090 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "RBCPar.fsy"
                                                           UnaryExpression(Negate,_2)
                   )
# 126 "RBCPar.fsy"
                 : 'Expr));
# 1101 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "RBCPar.fsy"
                                                           UnaryExpression(Identity,_2)
                   )
# 127 "RBCPar.fsy"
                 : 'Expr));
# 1112 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "RBCPar.fsy"
                                                           _2
                   )
# 128 "RBCPar.fsy"
                 : 'Expr));
# 1123 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "RBCPar.fsy"
                                                           IdentifierExpression {Identifier = _1;}
                   )
# 129 "RBCPar.fsy"
                 : 'Expr));
# 1134 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "RBCPar.fsy"
                                                           ArrayIdentifierExpression({Identifier = _1;},_3)
                   )
# 130 "RBCPar.fsy"
                 : 'Expr));
# 1146 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "RBCPar.fsy"
                                                           FunctionCallExpression(_1,_3)
                   )
# 131 "RBCPar.fsy"
                 : 'Expr));
# 1158 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "RBCPar.fsy"
                                                           ArraySizeExpression {Identifier = _1;}
                   )
# 132 "RBCPar.fsy"
                 : 'Expr));
# 1169 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "RBCPar.fsy"
                                                           LiteralExpression (BoolLiteral true)
                   )
# 133 "RBCPar.fsy"
                 : 'Expr));
# 1179 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "RBCPar.fsy"
                                                           LiteralExpression (BoolLiteral false)
                   )
# 134 "RBCPar.fsy"
                 : 'Expr));
# 1189 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "RBCPar.fsy"
                                                           LiteralExpression (IntLiteral _1)
                   )
# 135 "RBCPar.fsy"
                 : 'Expr));
# 1200 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "RBCPar.fsy"
                                                           LiteralExpression (FloatLiteral _1)
                   )
# 136 "RBCPar.fsy"
                 : 'Expr));
# 1211 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "RBCPar.fsy"
                                                           LiteralExpression (CharLiteral _1)
                   )
# 137 "RBCPar.fsy"
                 : 'Expr));
# 1222 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type_spec)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "RBCPar.fsy"
                                                           ArrayAllocationExpression(_2,_4)
                   )
# 138 "RBCPar.fsy"
                 : 'Expr));
# 1234 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Arg_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "RBCPar.fsy"
                                                           _1::_3
                   )
# 141 "RBCPar.fsy"
                 : 'Arg_list));
# 1246 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "RBCPar.fsy"
                                                           [_1]
                   )
# 142 "RBCPar.fsy"
                 : 'Arg_list));
# 1257 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Arg_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "RBCPar.fsy"
                                                           _1
                   )
# 145 "RBCPar.fsy"
                 : 'Args));
# 1268 "RBCPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "RBCPar.fsy"
                                                           []
                   )
# 146 "RBCPar.fsy"
                 : 'Args));
|]
# 1279 "RBCPar.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 46;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : RBC.AbstractTree.Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
