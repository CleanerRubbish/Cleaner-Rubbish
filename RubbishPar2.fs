// Implementation file for parser generated by fsyacc
module RubbishPar2
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "RubbishPar2.fsy"

  (* File Expr/ExprPar.fsy
     Parser specification for the simple expression language.
   *)
open Absyn
let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10

# 15 "RubbishPar2.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | DEF
  | LAMBDA
  | LPAR
  | RPAR
  | LCUR
  | RCUR
  | LBRACK
  | RBRACK
  | COMMA
  | SEMI
  | COLON
  | ASSIGN
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | NOT
  | OR
  | AND
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | RETURN
  | IF
  | ELSE
  | PRINT
  | PRINTLN
  | WHILE
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTFLOAT of (float)
  | CSTINT of (int)
  | CSTBOOL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_DEF
    | TOKEN_LAMBDA
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LCUR
    | TOKEN_RCUR
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_COMMA
    | TOKEN_SEMI
    | TOKEN_COLON
    | TOKEN_ASSIGN
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_NOT
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_RETURN
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_WHILE
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTFLOAT
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Vardec
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_StmtU
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | DEF  -> 1 
  | LAMBDA  -> 2 
  | LPAR  -> 3 
  | RPAR  -> 4 
  | LCUR  -> 5 
  | RCUR  -> 6 
  | LBRACK  -> 7 
  | RBRACK  -> 8 
  | COMMA  -> 9 
  | SEMI  -> 10 
  | COLON  -> 11 
  | ASSIGN  -> 12 
  | EQ  -> 13 
  | NE  -> 14 
  | GT  -> 15 
  | LT  -> 16 
  | GE  -> 17 
  | LE  -> 18 
  | NOT  -> 19 
  | OR  -> 20 
  | AND  -> 21 
  | PLUS  -> 22 
  | MINUS  -> 23 
  | TIMES  -> 24 
  | DIV  -> 25 
  | MOD  -> 26 
  | RETURN  -> 27 
  | IF  -> 28 
  | ELSE  -> 29 
  | PRINT  -> 30 
  | PRINTLN  -> 31 
  | WHILE  -> 32 
  | CSTSTRING _ -> 33 
  | NAME _ -> 34 
  | CSTFLOAT _ -> 35 
  | CSTINT _ -> 36 
  | CSTBOOL _ -> 37 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_DEF 
  | 2 -> TOKEN_LAMBDA 
  | 3 -> TOKEN_LPAR 
  | 4 -> TOKEN_RPAR 
  | 5 -> TOKEN_LCUR 
  | 6 -> TOKEN_RCUR 
  | 7 -> TOKEN_LBRACK 
  | 8 -> TOKEN_RBRACK 
  | 9 -> TOKEN_COMMA 
  | 10 -> TOKEN_SEMI 
  | 11 -> TOKEN_COLON 
  | 12 -> TOKEN_ASSIGN 
  | 13 -> TOKEN_EQ 
  | 14 -> TOKEN_NE 
  | 15 -> TOKEN_GT 
  | 16 -> TOKEN_LT 
  | 17 -> TOKEN_GE 
  | 18 -> TOKEN_LE 
  | 19 -> TOKEN_NOT 
  | 20 -> TOKEN_OR 
  | 21 -> TOKEN_AND 
  | 22 -> TOKEN_PLUS 
  | 23 -> TOKEN_MINUS 
  | 24 -> TOKEN_TIMES 
  | 25 -> TOKEN_DIV 
  | 26 -> TOKEN_MOD 
  | 27 -> TOKEN_RETURN 
  | 28 -> TOKEN_IF 
  | 29 -> TOKEN_ELSE 
  | 30 -> TOKEN_PRINT 
  | 31 -> TOKEN_PRINTLN 
  | 32 -> TOKEN_WHILE 
  | 33 -> TOKEN_CSTSTRING 
  | 34 -> TOKEN_NAME 
  | 35 -> TOKEN_CSTFLOAT 
  | 36 -> TOKEN_CSTINT 
  | 37 -> TOKEN_CSTBOOL 
  | 40 -> TOKEN_end_of_input
  | 38 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Topdec 
    | 6 -> NONTERM_Fundec 
    | 7 -> NONTERM_Paramdecs 
    | 8 -> NONTERM_Paramdecs 
    | 9 -> NONTERM_Paramdecs1 
    | 10 -> NONTERM_Paramdecs1 
    | 11 -> NONTERM_Vardec 
    | 12 -> NONTERM_Block 
    | 13 -> NONTERM_StmtOrDecSeq 
    | 14 -> NONTERM_StmtOrDecSeq 
    | 15 -> NONTERM_Stmt 
    | 16 -> NONTERM_Stmt 
    | 17 -> NONTERM_StmtM 
    | 18 -> NONTERM_StmtM 
    | 19 -> NONTERM_StmtM 
    | 20 -> NONTERM_StmtM 
    | 21 -> NONTERM_StmtM 
    | 22 -> NONTERM_StmtM 
    | 23 -> NONTERM_StmtU 
    | 24 -> NONTERM_StmtU 
    | 25 -> NONTERM_StmtU 
    | 26 -> NONTERM_Expr 
    | 27 -> NONTERM_Expr 
    | 28 -> NONTERM_ExprNotAccess 
    | 29 -> NONTERM_ExprNotAccess 
    | 30 -> NONTERM_ExprNotAccess 
    | 31 -> NONTERM_ExprNotAccess 
    | 32 -> NONTERM_ExprNotAccess 
    | 33 -> NONTERM_ExprNotAccess 
    | 34 -> NONTERM_ExprNotAccess 
    | 35 -> NONTERM_ExprNotAccess 
    | 36 -> NONTERM_ExprNotAccess 
    | 37 -> NONTERM_ExprNotAccess 
    | 38 -> NONTERM_ExprNotAccess 
    | 39 -> NONTERM_ExprNotAccess 
    | 40 -> NONTERM_ExprNotAccess 
    | 41 -> NONTERM_ExprNotAccess 
    | 42 -> NONTERM_ExprNotAccess 
    | 43 -> NONTERM_ExprNotAccess 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_AtExprNotAccess 
    | 49 -> NONTERM_AtExprNotAccess 
    | 50 -> NONTERM_Access 
    | 51 -> NONTERM_Access 
    | 52 -> NONTERM_Access 
    | 53 -> NONTERM_Exprs 
    | 54 -> NONTERM_Exprs 
    | 55 -> NONTERM_Exprs1 
    | 56 -> NONTERM_Exprs1 
    | 57 -> NONTERM_Const 
    | 58 -> NONTERM_Const 
    | 59 -> NONTERM_Const 
    | 60 -> NONTERM_Const 
    | 61 -> NONTERM_Const 
    | 62 -> NONTERM_Const 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 40 
let _fsyacc_tagOfErrorTerminal = 38

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | DEF  -> "DEF" 
  | LAMBDA  -> "LAMBDA" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LCUR  -> "LCUR" 
  | RCUR  -> "RCUR" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | COMMA  -> "COMMA" 
  | SEMI  -> "SEMI" 
  | COLON  -> "COLON" 
  | ASSIGN  -> "ASSIGN" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | NOT  -> "NOT" 
  | OR  -> "OR" 
  | AND  -> "AND" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | RETURN  -> "RETURN" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | PRINT  -> "PRINT" 
  | PRINTLN  -> "PRINTLN" 
  | WHILE  -> "WHILE" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTFLOAT _ -> "CSTFLOAT" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | DEF  -> (null : System.Object) 
  | LAMBDA  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LCUR  -> (null : System.Object) 
  | RCUR  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | PRINTLN  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTFLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 4us; 4us; 4us; 2us; 65535us; 0us; 8us; 4us; 8us; 2us; 65535us; 11us; 12us; 95us; 96us; 3us; 65535us; 11us; 15us; 17us; 18us; 95us; 15us; 3us; 65535us; 11us; 16us; 17us; 16us; 95us; 16us; 8us; 65535us; 0us; 34us; 4us; 34us; 13us; 14us; 20us; 34us; 23us; 34us; 38us; 34us; 39us; 34us; 44us; 34us; 4us; 65535us; 0us; 6us; 4us; 6us; 20us; 21us; 23us; 24us; 5us; 65535us; 0us; 23us; 4us; 23us; 20us; 23us; 23us; 23us; 38us; 47us; 7us; 65535us; 0us; 25us; 4us; 25us; 20us; 25us; 23us; 25us; 38us; 26us; 39us; 40us; 44us; 45us; 7us; 65535us; 0us; 27us; 4us; 27us; 20us; 27us; 23us; 27us; 38us; 27us; 39us; 46us; 44us; 48us; 31us; 65535us; 0us; 28us; 4us; 28us; 20us; 28us; 23us; 28us; 30us; 32us; 36us; 37us; 38us; 28us; 39us; 28us; 42us; 43us; 44us; 28us; 55us; 56us; 58us; 81us; 61us; 62us; 63us; 64us; 82us; 66us; 83us; 67us; 84us; 68us; 85us; 69us; 86us; 70us; 87us; 71us; 88us; 72us; 89us; 73us; 90us; 74us; 91us; 75us; 92us; 76us; 93us; 77us; 94us; 79us; 97us; 78us; 99us; 78us; 102us; 80us; 105us; 81us; 31us; 65535us; 0us; 51us; 4us; 51us; 20us; 51us; 23us; 51us; 30us; 51us; 36us; 51us; 38us; 51us; 39us; 51us; 42us; 51us; 44us; 51us; 55us; 51us; 58us; 51us; 61us; 51us; 63us; 51us; 82us; 51us; 83us; 51us; 84us; 51us; 85us; 51us; 86us; 51us; 87us; 51us; 88us; 51us; 89us; 51us; 90us; 51us; 91us; 51us; 92us; 51us; 93us; 51us; 94us; 51us; 97us; 52us; 99us; 53us; 102us; 51us; 105us; 51us; 31us; 65535us; 0us; 54us; 4us; 54us; 20us; 54us; 23us; 54us; 30us; 54us; 36us; 54us; 38us; 54us; 39us; 54us; 42us; 54us; 44us; 54us; 55us; 54us; 58us; 54us; 61us; 54us; 63us; 54us; 82us; 54us; 83us; 54us; 84us; 54us; 85us; 54us; 86us; 54us; 87us; 54us; 88us; 54us; 89us; 54us; 90us; 54us; 91us; 54us; 92us; 54us; 93us; 54us; 94us; 54us; 97us; 54us; 99us; 54us; 102us; 54us; 105us; 54us; 31us; 65535us; 0us; 50us; 4us; 50us; 20us; 50us; 23us; 50us; 30us; 50us; 36us; 50us; 38us; 50us; 39us; 50us; 42us; 50us; 44us; 50us; 55us; 50us; 58us; 50us; 61us; 50us; 63us; 50us; 82us; 50us; 83us; 50us; 84us; 50us; 85us; 50us; 86us; 50us; 87us; 50us; 88us; 50us; 89us; 50us; 90us; 50us; 91us; 50us; 92us; 50us; 93us; 50us; 94us; 50us; 97us; 50us; 99us; 49us; 102us; 50us; 105us; 50us; 1us; 65535us; 58us; 59us; 2us; 65535us; 58us; 104us; 105us; 106us; 31us; 65535us; 0us; 98us; 4us; 98us; 20us; 98us; 23us; 98us; 30us; 98us; 36us; 98us; 38us; 98us; 39us; 98us; 42us; 98us; 44us; 98us; 55us; 98us; 58us; 98us; 61us; 98us; 63us; 98us; 82us; 98us; 83us; 98us; 84us; 98us; 85us; 98us; 86us; 98us; 87us; 98us; 88us; 98us; 89us; 98us; 90us; 98us; 91us; 98us; 92us; 98us; 93us; 98us; 94us; 98us; 97us; 98us; 99us; 98us; 102us; 98us; 105us; 98us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 12us; 15us; 19us; 23us; 32us; 37us; 43us; 51us; 59us; 91us; 123us; 155us; 187us; 189us; 192us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 8us; 2us; 9us; 10us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 14us; 1us; 14us; 1us; 15us; 3us; 15us; 21us; 23us; 1us; 16us; 14us; 17us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 1us; 17us; 2us; 18us; 19us; 1us; 18us; 14us; 19us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 1us; 19us; 1us; 20us; 3us; 21us; 23us; 24us; 3us; 21us; 23us; 24us; 16us; 21us; 23us; 24us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 3us; 21us; 23us; 24us; 2us; 21us; 23us; 1us; 21us; 2us; 22us; 25us; 2us; 22us; 25us; 15us; 22us; 25us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 2us; 22us; 25us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 4us; 26us; 29us; 51us; 52us; 3us; 26us; 29us; 52us; 1us; 27us; 2us; 27us; 47us; 2us; 27us; 49us; 1us; 28us; 1us; 29us; 14us; 29us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 2us; 30us; 50us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 31us; 14us; 31us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 1us; 32us; 14us; 32us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 1us; 33us; 14us; 34us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 14us; 34us; 35us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 14us; 34us; 35us; 36us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 14us; 34us; 35us; 36us; 37us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 14us; 34us; 35us; 36us; 37us; 38us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 14us; 34us; 35us; 36us; 37us; 38us; 39us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 14us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 14us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 41us; 42us; 43us; 44us; 45us; 46us; 14us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 42us; 43us; 44us; 45us; 46us; 14us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 43us; 44us; 45us; 46us; 14us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 44us; 45us; 46us; 14us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 45us; 46us; 13us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 14us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 46us; 14us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 52us; 15us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 55us; 56us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 47us; 1us; 47us; 1us; 48us; 2us; 49us; 51us; 1us; 49us; 1us; 51us; 1us; 52us; 1us; 52us; 1us; 54us; 1us; 56us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 2us; 61us; 62us; 1us; 61us; 1us; 62us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 53us; 57us; 59us; 74us; 76us; 79us; 81us; 96us; 98us; 100us; 104us; 108us; 125us; 129us; 132us; 134us; 137us; 140us; 156us; 159us; 161us; 163us; 165us; 167us; 172us; 176us; 178us; 181us; 184us; 186us; 188us; 203us; 206us; 208us; 210us; 212us; 214us; 229us; 231us; 246us; 248us; 263us; 278us; 293us; 308us; 323us; 338us; 353us; 368us; 383us; 398us; 413us; 428us; 442us; 457us; 472us; 488us; 490us; 492us; 494us; 496us; 498us; 500us; 502us; 504us; 506us; 508us; 510us; 512us; 514us; 516us; 518us; 520us; 522us; 525us; 527us; 529us; 531us; 533us; 535us; 537us; 539us; 541us; 543us; 545us; 547us; 550us; 552us; |]
let _fsyacc_action_rows = 114
let _fsyacc_actionTableElements = [|17us; 16386us; 1us; 9us; 2us; 95us; 3us; 99us; 5us; 20us; 10us; 16397us; 19us; 61us; 23us; 111us; 27us; 30us; 28us; 35us; 30us; 63us; 31us; 65us; 32us; 41us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 17us; 16386us; 1us; 9us; 2us; 95us; 3us; 99us; 5us; 20us; 10us; 16397us; 19us; 61us; 23us; 111us; 27us; 30us; 28us; 35us; 30us; 63us; 31us; 65us; 32us; 41us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 0us; 16387us; 1us; 32768us; 10us; 7us; 0us; 16388us; 0us; 16389us; 1us; 32768us; 34us; 10us; 1us; 32768us; 3us; 11us; 1us; 16391us; 34us; 19us; 1us; 32768us; 4us; 13us; 1us; 32768us; 5us; 20us; 0us; 16390us; 0us; 16392us; 1us; 16393us; 9us; 17us; 1us; 32768us; 34us; 19us; 0us; 16394us; 0us; 16395us; 15us; 16397us; 2us; 95us; 3us; 99us; 5us; 20us; 19us; 61us; 23us; 111us; 27us; 30us; 28us; 35us; 30us; 63us; 31us; 65us; 32us; 41us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 1us; 32768us; 6us; 22us; 0us; 16396us; 15us; 16397us; 2us; 95us; 3us; 99us; 5us; 20us; 19us; 61us; 23us; 111us; 27us; 30us; 28us; 35us; 30us; 63us; 31us; 65us; 32us; 41us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 0us; 16398us; 0us; 16399us; 1us; 16399us; 29us; 39us; 0us; 16400us; 14us; 32768us; 10us; 29us; 13us; 87us; 14us; 88us; 15us; 89us; 16us; 90us; 17us; 91us; 18us; 92us; 20us; 94us; 21us; 93us; 22us; 82us; 23us; 83us; 24us; 84us; 25us; 85us; 26us; 86us; 0us; 16401us; 12us; 32768us; 2us; 95us; 3us; 99us; 10us; 31us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 0us; 16402us; 14us; 32768us; 10us; 33us; 13us; 87us; 14us; 88us; 15us; 89us; 16us; 90us; 17us; 91us; 18us; 92us; 20us; 94us; 21us; 93us; 22us; 82us; 23us; 83us; 24us; 84us; 25us; 85us; 26us; 86us; 0us; 16403us; 0us; 16404us; 1us; 32768us; 3us; 36us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 14us; 32768us; 4us; 38us; 13us; 87us; 14us; 88us; 15us; 89us; 16us; 90us; 17us; 91us; 18us; 92us; 20us; 94us; 21us; 93us; 22us; 82us; 23us; 83us; 24us; 84us; 25us; 85us; 26us; 86us; 15us; 32768us; 2us; 95us; 3us; 99us; 5us; 20us; 19us; 61us; 23us; 111us; 27us; 30us; 28us; 35us; 30us; 63us; 31us; 65us; 32us; 41us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 15us; 32768us; 2us; 95us; 3us; 99us; 5us; 20us; 19us; 61us; 23us; 111us; 27us; 30us; 28us; 35us; 30us; 63us; 31us; 65us; 32us; 41us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 0us; 16405us; 1us; 32768us; 3us; 42us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 14us; 32768us; 4us; 44us; 13us; 87us; 14us; 88us; 15us; 89us; 16us; 90us; 17us; 91us; 18us; 92us; 20us; 94us; 21us; 93us; 22us; 82us; 23us; 83us; 24us; 84us; 25us; 85us; 26us; 86us; 15us; 32768us; 2us; 95us; 3us; 99us; 5us; 20us; 19us; 61us; 23us; 111us; 27us; 30us; 28us; 35us; 30us; 63us; 31us; 65us; 32us; 41us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 0us; 16409us; 3us; 16410us; 4us; 101us; 7us; 102us; 12us; 55us; 2us; 16410us; 7us; 102us; 12us; 55us; 0us; 16411us; 4us; 16411us; 4us; 16431us; 8us; 16431us; 9us; 16431us; 10us; 16431us; 1us; 16411us; 4us; 100us; 0us; 16412us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 13us; 16413us; 13us; 87us; 14us; 88us; 15us; 89us; 16us; 90us; 17us; 91us; 18us; 92us; 20us; 94us; 21us; 93us; 22us; 82us; 23us; 83us; 24us; 84us; 25us; 85us; 26us; 86us; 1us; 16434us; 3us; 58us; 11us; 16437us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 1us; 32768us; 4us; 60us; 0us; 16414us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 0us; 16415us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 13us; 16416us; 13us; 87us; 14us; 88us; 15us; 89us; 16us; 90us; 17us; 91us; 18us; 92us; 20us; 94us; 21us; 93us; 22us; 82us; 23us; 83us; 24us; 84us; 25us; 85us; 26us; 86us; 0us; 16417us; 3us; 16418us; 24us; 84us; 25us; 85us; 26us; 86us; 3us; 16419us; 24us; 84us; 25us; 85us; 26us; 86us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 9us; 16423us; 15us; 89us; 16us; 90us; 17us; 91us; 18us; 92us; 22us; 82us; 23us; 83us; 24us; 84us; 25us; 85us; 26us; 86us; 9us; 16424us; 15us; 89us; 16us; 90us; 17us; 91us; 18us; 92us; 22us; 82us; 23us; 83us; 24us; 84us; 25us; 85us; 26us; 86us; 9us; 16425us; 15us; 89us; 16us; 90us; 17us; 91us; 18us; 92us; 22us; 82us; 23us; 83us; 24us; 84us; 25us; 85us; 26us; 86us; 9us; 16426us; 15us; 89us; 16us; 90us; 17us; 91us; 18us; 92us; 22us; 82us; 23us; 83us; 24us; 84us; 25us; 85us; 26us; 86us; 9us; 16427us; 15us; 89us; 16us; 90us; 17us; 91us; 18us; 92us; 22us; 82us; 23us; 83us; 24us; 84us; 25us; 85us; 26us; 86us; 9us; 16428us; 15us; 89us; 16us; 90us; 17us; 91us; 18us; 92us; 22us; 82us; 23us; 83us; 24us; 84us; 25us; 85us; 26us; 86us; 11us; 16429us; 13us; 87us; 14us; 88us; 15us; 89us; 16us; 90us; 17us; 91us; 18us; 92us; 22us; 82us; 23us; 83us; 24us; 84us; 25us; 85us; 26us; 86us; 13us; 32768us; 13us; 87us; 14us; 88us; 15us; 89us; 16us; 90us; 17us; 91us; 18us; 92us; 20us; 94us; 21us; 93us; 22us; 82us; 23us; 83us; 24us; 84us; 25us; 85us; 26us; 86us; 12us; 16430us; 13us; 87us; 14us; 88us; 15us; 89us; 16us; 90us; 17us; 91us; 18us; 92us; 21us; 93us; 22us; 82us; 23us; 83us; 24us; 84us; 25us; 85us; 26us; 86us; 14us; 32768us; 8us; 103us; 13us; 87us; 14us; 88us; 15us; 89us; 16us; 90us; 17us; 91us; 18us; 92us; 20us; 94us; 21us; 93us; 22us; 82us; 23us; 83us; 24us; 84us; 25us; 85us; 26us; 86us; 14us; 16439us; 9us; 105us; 13us; 87us; 14us; 88us; 15us; 89us; 16us; 90us; 17us; 91us; 18us; 92us; 20us; 94us; 21us; 93us; 22us; 82us; 23us; 83us; 24us; 84us; 25us; 85us; 26us; 86us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 1us; 16391us; 34us; 19us; 1us; 32768us; 11us; 97us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 0us; 16432us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 0us; 16433us; 0us; 16435us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 0us; 16436us; 0us; 16438us; 11us; 32768us; 2us; 95us; 3us; 99us; 19us; 61us; 23us; 111us; 30us; 63us; 31us; 65us; 33us; 110us; 34us; 57us; 35us; 109us; 36us; 107us; 37us; 108us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 0us; 16443us; 0us; 16444us; 2us; 32768us; 35us; 113us; 36us; 112us; 0us; 16445us; 0us; 16446us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 18us; 19us; 21us; 22us; 40us; 41us; 43us; 44us; 45us; 47us; 49us; 51us; 53us; 55us; 56us; 57us; 59us; 61us; 62us; 63us; 79us; 81us; 82us; 98us; 99us; 100us; 102us; 103us; 118us; 119us; 132us; 133us; 148us; 149us; 150us; 152us; 164us; 179us; 195us; 211us; 212us; 214us; 226us; 241us; 257us; 258us; 259us; 260us; 261us; 265us; 268us; 269us; 274us; 276us; 277us; 289us; 303us; 305us; 317us; 319us; 320us; 332us; 333us; 345us; 359us; 360us; 364us; 368us; 369us; 370us; 371us; 381us; 391us; 401us; 411us; 421us; 431us; 443us; 457us; 470us; 485us; 500us; 512us; 524us; 536us; 548us; 560us; 572us; 584us; 596us; 608us; 620us; 632us; 644us; 656us; 658us; 660us; 672us; 673us; 685us; 686us; 687us; 699us; 700us; 701us; 713us; 714us; 715us; 716us; 717us; 718us; 721us; 722us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 2us; 1us; 6us; 0us; 1us; 1us; 3us; 1us; 3us; 0us; 2us; 1us; 1us; 2us; 2us; 3us; 1us; 7us; 5us; 7us; 5us; 5us; 1us; 1us; 1us; 3us; 4us; 2us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 1us; 3us; 1us; 3us; 4us; 0us; 1us; 1us; 3us; 1us; 1us; 1us; 1us; 2us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 6us; 6us; 7us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; 11us; 11us; 11us; 11us; 12us; 12us; 12us; 13us; 13us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 14us; 15us; 15us; 16us; 16us; 16us; 17us; 17us; 18us; 18us; 19us; 19us; 19us; 19us; 19us; 19us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 16392us; 65535us; 65535us; 16394us; 16395us; 65535us; 65535us; 16396us; 65535us; 16398us; 16399us; 65535us; 16400us; 65535us; 16401us; 65535us; 16402us; 65535us; 16403us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 16405us; 65535us; 65535us; 65535us; 65535us; 16406us; 16407us; 16408us; 16409us; 65535us; 65535us; 16411us; 65535us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16432us; 65535us; 16433us; 16435us; 65535us; 16436us; 16438us; 65535us; 16440us; 16441us; 16442us; 16443us; 16444us; 65535us; 16445us; 16446us; |]
let _fsyacc_reductions ()  =    [| 
# 373 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 382 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "RubbishPar2.fsy"
                                                               Prog _1               
                   )
# 37 "RubbishPar2.fsy"
                 : Absyn.program));
# 393 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "RubbishPar2.fsy"
                                                               [] 
                   )
# 40 "RubbishPar2.fsy"
                 : 'Topdecs));
# 403 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "RubbishPar2.fsy"
                                                               _1 :: _2 
                   )
# 41 "RubbishPar2.fsy"
                 : 'Topdecs));
# 415 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "RubbishPar2.fsy"
                                                               _1 
                   )
# 44 "RubbishPar2.fsy"
                 : 'Topdec));
# 426 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "RubbishPar2.fsy"
                                                               _1 
                   )
# 45 "RubbishPar2.fsy"
                 : 'Topdec));
# 437 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "RubbishPar2.fsy"
                                                              Fundec(_2, _4, _6) 
                   )
# 49 "RubbishPar2.fsy"
                 : 'Fundec));
# 450 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "RubbishPar2.fsy"
                                                               [] 
                   )
# 53 "RubbishPar2.fsy"
                 : 'Paramdecs));
# 460 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "RubbishPar2.fsy"
                                                               _1 
                   )
# 54 "RubbishPar2.fsy"
                 : 'Paramdecs));
# 471 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "RubbishPar2.fsy"
                                                               [_1]     
                   )
# 58 "RubbishPar2.fsy"
                 : 'Paramdecs1));
# 482 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "RubbishPar2.fsy"
                                                               _1 :: _3 
                   )
# 59 "RubbishPar2.fsy"
                 : 'Paramdecs1));
# 494 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "RubbishPar2.fsy"
                                                               ((fun t -> t), _1)
                   )
# 62 "RubbishPar2.fsy"
                 : 'Vardec));
# 505 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "RubbishPar2.fsy"
                                                               Block _2 
                   )
# 65 "RubbishPar2.fsy"
                 : 'Block));
# 516 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "RubbishPar2.fsy"
                                                               [] 
                   )
# 69 "RubbishPar2.fsy"
                 : 'StmtOrDecSeq));
# 526 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "RubbishPar2.fsy"
                                                               Stmt _1 :: _2 
                   )
# 70 "RubbishPar2.fsy"
                 : 'StmtOrDecSeq));
# 538 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "RubbishPar2.fsy"
                                                               _1 
                   )
# 73 "RubbishPar2.fsy"
                 : 'Stmt));
# 549 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "RubbishPar2.fsy"
                                                               _1 
                   )
# 74 "RubbishPar2.fsy"
                 : 'Stmt));
# 560 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "RubbishPar2.fsy"
                                                               Expr(_1)             
                   )
# 77 "RubbishPar2.fsy"
                 : 'StmtM));
# 571 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "RubbishPar2.fsy"
                                                               Return None          
                   )
# 78 "RubbishPar2.fsy"
                 : 'StmtM));
# 581 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "RubbishPar2.fsy"
                                                               Return(Some(_2))     
                   )
# 79 "RubbishPar2.fsy"
                 : 'StmtM));
# 592 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "RubbishPar2.fsy"
                                                               _1                   
                   )
# 80 "RubbishPar2.fsy"
                 : 'StmtM));
# 603 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "RubbishPar2.fsy"
                                                               If(_3, _5, _7)       
                   )
# 81 "RubbishPar2.fsy"
                 : 'StmtM));
# 616 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "RubbishPar2.fsy"
                                                               While(_3, _5)        
                   )
# 82 "RubbishPar2.fsy"
                 : 'StmtM));
# 628 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "RubbishPar2.fsy"
                                                               If(_3, _5, _7)       
                   )
# 86 "RubbishPar2.fsy"
                 : 'StmtU));
# 641 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "RubbishPar2.fsy"
                                                               If(_3, _5, Block []) 
                   )
# 87 "RubbishPar2.fsy"
                 : 'StmtU));
# 653 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "RubbishPar2.fsy"
                                                               While(_3, _5)        
                   )
# 88 "RubbishPar2.fsy"
                 : 'StmtU));
# 665 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "RubbishPar2.fsy"
                                                               Access _1           
                   )
# 91 "RubbishPar2.fsy"
                 : 'Expr));
# 676 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "RubbishPar2.fsy"
                                                               _1                  
                   )
# 92 "RubbishPar2.fsy"
                 : 'Expr));
# 687 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "RubbishPar2.fsy"
                                                               _1                  
                   )
# 96 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 698 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "RubbishPar2.fsy"
                                                               Assign(_1, _3)      
                   )
# 97 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 710 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "RubbishPar2.fsy"
                                                               Call(_1, _3)        
                   )
# 98 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 722 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "RubbishPar2.fsy"
                                                               Prim1("!", _2)      
                   )
# 99 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 733 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "RubbishPar2.fsy"
                                                               Prim1("print", _2) 
                   )
# 100 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 744 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "RubbishPar2.fsy"
                                                               Prim1("println", nl) 
                   )
# 101 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 754 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "RubbishPar2.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 102 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 766 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "RubbishPar2.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 103 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 778 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "RubbishPar2.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 104 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 790 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "RubbishPar2.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 105 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 802 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "RubbishPar2.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 106 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 814 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "RubbishPar2.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 107 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 826 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "RubbishPar2.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 108 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 838 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "RubbishPar2.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 109 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 850 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "RubbishPar2.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 110 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 862 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "RubbishPar2.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 111 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 874 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "RubbishPar2.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 112 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 886 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "RubbishPar2.fsy"
                                                               Andalso(_1, _3)     
                   )
# 113 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 898 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "RubbishPar2.fsy"
                                                               Orelse(_1, _3)      
                   )
# 114 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 910 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "RubbishPar2.fsy"
                                                               Fundec(None,_2,_4)  
                   )
# 115 "RubbishPar2.fsy"
                 : 'ExprNotAccess));
# 922 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "RubbishPar2.fsy"
                                                               _1                  
                   )
# 119 "RubbishPar2.fsy"
                 : 'AtExprNotAccess));
# 933 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "RubbishPar2.fsy"
                                                               _2                  
                   )
# 120 "RubbishPar2.fsy"
                 : 'AtExprNotAccess));
# 944 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "RubbishPar2.fsy"
                                                               AccVar _1           
                   )
# 124 "RubbishPar2.fsy"
                 : 'Access));
# 955 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "RubbishPar2.fsy"
                                                               _2                  
                   )
# 125 "RubbishPar2.fsy"
                 : 'Access));
# 966 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "RubbishPar2.fsy"
                                                               AccIndex(_1, _3)    
                   )
# 126 "RubbishPar2.fsy"
                 : 'Access));
# 978 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "RubbishPar2.fsy"
                                                               []       
                   )
# 130 "RubbishPar2.fsy"
                 : 'Exprs));
# 988 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "RubbishPar2.fsy"
                                                               _1       
                   )
# 131 "RubbishPar2.fsy"
                 : 'Exprs));
# 999 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "RubbishPar2.fsy"
                                                               [_1]     
                   )
# 135 "RubbishPar2.fsy"
                 : 'Exprs1));
# 1010 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "RubbishPar2.fsy"
                                                               _1 :: _3 
                   )
# 136 "RubbishPar2.fsy"
                 : 'Exprs1));
# 1022 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "RubbishPar2.fsy"
                                                               CstI _1       
                   )
# 139 "RubbishPar2.fsy"
                 : 'Const));
# 1033 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "RubbishPar2.fsy"
                                                               CstB _1       
                   )
# 140 "RubbishPar2.fsy"
                 : 'Const));
# 1044 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "RubbishPar2.fsy"
                                                               CstF _1       
                   )
# 141 "RubbishPar2.fsy"
                 : 'Const));
# 1055 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "RubbishPar2.fsy"
                                                               CstS _1       
                   )
# 142 "RubbishPar2.fsy"
                 : 'Const));
# 1066 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "RubbishPar2.fsy"
                                                               CstI -_2      
                   )
# 143 "RubbishPar2.fsy"
                 : 'Const));
# 1077 "RubbishPar2.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "RubbishPar2.fsy"
                                               CstF -_2      
                   )
# 144 "RubbishPar2.fsy"
                 : 'Const));
|]
# 1089 "RubbishPar2.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 41;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
